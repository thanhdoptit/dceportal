import db from '../models/index.js';
const {
  WorkShift,
  WorkSession,
  User,
  ShiftHandover,
  ShiftCheckForm,
  ShiftCheckItem,
  ShiftHandoverUser,
  ShiftHandoverDevice,
  ShiftHandoverTask,
  sequelize,
  Sequelize,
  Device,
  DeviceError,
  TaskUsers,
  Partners

} = db;
import { Op, where } from 'sequelize';
import fs from 'fs';
import path from 'path';
import { getCurrentDateUTC7 } from '../utils/dateUtils.js';
import config from '../config/upload.js';
import { broadcastShiftUpdate } from '../index.js';
import { shiftConfig, FIXED_SHIFTS } from '../config/shiftConfig.js';
// H√†m helper ki·ªÉm tra ca li·ªÅn k·ªÅ
const checkConsecutiveShifts = (previousShiftCodes, newShiftCode) => {
  // L·∫•y th·ª© t·ª± ca t·ª´ FIXED_SHIFTS (ho·∫∑c Object.keys(shiftConfig))
  const shiftOrder = FIXED_SHIFTS;

  for (const prevCode of previousShiftCodes) {
    const prevIndex = shiftOrder.indexOf(prevCode);
    const newIndex = shiftOrder.indexOf(newShiftCode);
    // N·∫øu ca m·ªõi c√≥ index l·ªõn h∆°n v√† li·ªÅn k·ªÅ v·ªõi ca c≈©
    if (Math.abs(newIndex - prevIndex) === 1) {
      return {
        isConsecutive: true,
        prevCode,
        newCode: newShiftCode
      };
    }
  }
  return { isConsecutive: false };
};

// H√†m c·∫≠p nh·∫≠t ShiftHandoverUser khi c√≥ thay ƒë·ªïi trong ca
const updateShiftHandoverUsers = async (shiftId, currentUsers) => {
  try {
    console.log('üîÑ Updating ShiftHandoverUsers for shift:', shiftId);

    // L·∫•y c√°c handover m√† ca hi·ªán t·∫°i l√† ng∆∞·ªùi nh·∫≠n
    const handovers = await ShiftHandover.findAll({
      where: {
        toShiftId: shiftId  // Ch·ªâ l·∫•y handover m√† ca hi·ªán t·∫°i l√† ng∆∞·ªùi nh·∫≠n
      },
      include: [
        {
          model: User,
          as: 'ToUsers',
          through: { attributes: [] },
          attributes: ['id']
        }
      ]
    });

    console.log('üìù Found handovers to update:', handovers.length);

    // L·∫•y danh s√°ch ng∆∞·ªùi ƒëang trong ca t·ª´ WorkSession
    const activeUsers = await WorkSession.findAll({
      where: {
        workShiftId: shiftId,
        status: 'active'
      },
      include: [{
        model: User,
        as: 'User',  // Th√™m alias 'User' v√†o ƒë√¢y
        attributes: ['id', 'username', 'fullname']
      }]
    });

    const activeUserIds = activeUsers.map(session => session.User.id);
    console.log('üë• Active users in shift:', activeUserIds);

    // C·∫≠p nh·∫≠t t·ª´ng handover
    for (const handover of handovers) {
      // L·∫•y danh s√°ch user hi·ªán t·∫°i trong handover
      const currentHandoverUserIds = handover.ToUsers.map(user => user.id);

      // X√≥a nh·ªØng user kh√¥ng c√≤n active trong ca
      const usersToRemove = currentHandoverUserIds.filter(id => !activeUserIds.includes(id));
      if (usersToRemove.length > 0) {
        await ShiftHandoverUser.destroy({
          where: {
            shiftHandoverId: handover.id,
            userId: usersToRemove,
            role: 'receiver',
            type: 'to'
          }
        });
        console.log('üóëÔ∏è Removed users from handover:', usersToRemove);
      }

      // Th√™m nh·ªØng user m·ªõi v√†o handover
      const usersToAdd = activeUserIds.filter(id => !currentHandoverUserIds.includes(id));
      if (usersToAdd.length > 0) {
        await Promise.all(usersToAdd.map(userId =>
          ShiftHandoverUser.create({
            shiftHandoverId: handover.id,
            userId,
            role: 'receiver',
            type: 'to'
          })
        ));
        console.log('‚ûï Added new users to handover:', usersToAdd);
      }
    }

    console.log('‚úÖ Updated ShiftHandoverUsers for shift:', shiftId);
  } catch (error) {
    console.error('‚ùå Error updating ShiftHandoverUsers:', error);
    throw error;
  }
};

// H√†m g·ª≠i th√¥ng b√°o WebSocket cho shift
const sendShiftUpdate = (shift, changeType = 'status', oldValue = null, newValue = null, userId = null, userName = null) => {
  // TƒÉng version c·ªßa shift
  const updatedShift = {
    ...shift.toJSON(),
    version: (shift.version || 0) + 1,
    lastUpdatedBy: userId,
    lastUpdatedByUser: userName
  };

  broadcastShiftUpdate({
    shift: updatedShift,
    changeType,
    oldValue,
    newValue
  });

  // C·∫≠p nh·∫≠t version trong database
  shift.update({ version: updatedShift.version }).catch(error => {
    console.error('Error updating shift version:', error);
  });
};

// Ch·ªçn ca l√†m vi·ªác
export const selectShift = async (req, res) => {
  try {
    const { shiftCode, shiftDate } = req.body;
    const userId = req.user.id;

    console.log('üîÑ Selecting shift:', { shiftCode, userId, shiftDate });

    // L·∫•y th√¥ng tin user hi·ªán t·∫°i
    const currentUser = await User.findByPk(userId);
    console.log('üë§ Current user:', currentUser.toJSON());

    // Ki·ªÉm tra xem user ƒë√£ c√≥ session n√†o trong ng√†y ch∆∞a
    const existingSession = await WorkSession.findOne({
      where: {
        userId,
        date: shiftDate
      }
    });
    console.log('üîç Existing session:', existingSession?.toJSON());

    // Ki·ªÉm tra xem user ƒë√£ c√≥ trong workedUsers c·ªßa ca n√†o trong ng√†y ch∆∞a
    const shiftsWithUser = await WorkShift.findAll({
      where: {
        date: shiftDate
      }
    });

    // L·ªçc c√°c ca c√≥ ch·ª©a user trong workedUsers
    const shiftsContainingUser = shiftsWithUser.filter(shift => {
      const workedUsers = shift.workedUsers || [];
      return workedUsers.some(user => user.id === userId);
    });

    console.log('üîç Shifts with user:', shiftsContainingUser.map(s => s.toJSON()));

    // N·∫øu user ƒë√£ c√≥ trong workedUsers c·ªßa ca kh√°c, kh√¥ng cho ph√©p v√†o ca m·ªõi
    if (shiftsContainingUser.length > 0) {
      const existingShift = shiftsContainingUser[0];
      return res.status(400).json({
        message: `B·∫°n ƒë√£ tham gia ca ${existingShift.code} trong ng√†y h√¥m nay, kh√¥ng th·ªÉ tham gia ca kh√°c`
      });
    }

    // L·∫•y danh s√°ch ca trong ng√†y
    const todayShifts = await WorkShift.findAll({
      where: {
        date: shiftDate
      }
    });
    console.log('üìÖ Today shifts:', todayShifts.map(s => s.toJSON()));

    // L·∫•y danh s√°ch ca ƒë√£ ho√†n th√†nh
    const doneShifts = await WorkShift.findAll({
      where: {
        date: shiftDate,
        status: 'done'
      }
    });
    console.log('üîç Done shifts:', doneShifts.map(s => s.toJSON()));

    // T√¨m ca t∆∞∆°ng ·ª©ng v·ªõi m√£ ca
    let shift = await WorkShift.findOne({
      where: {
        code: shiftCode,
        date: shiftDate
      }
    });
    console.log('üîç Found shift:', shift?.toJSON());



    // X√°c ƒë·ªãnh nh√≥m c·ªßa ca m·ªõi
    const newShiftGroup = shiftCode[0]; // L·∫•y ch·ªØ c√°i ƒë·∫ßu (T, H, V)
    const newShiftIndex = parseInt(shiftCode[1]); // L·∫•y s·ªë th·ª© t·ª± trong nh√≥m

    // Ki·ªÉm tra ca tr∆∞·ªõc ƒë√≥ trong c√πng ng√†y
    if (newShiftIndex > 1) {
      const previousShiftCode = `${newShiftGroup}${newShiftIndex - 1}`;
      const previousShift = await WorkShift.findOne({
        where: {
          code: previousShiftCode,
          date: shiftDate
        }
      });

      // Cho ph√©p ch·ªçn ca khi ca tr∆∞·ªõc ƒëang ·ªü tr·∫°ng th√°i 'doing' ho·∫∑c 'handover' ho·∫∑c 'done'
      if (!previousShift || !['doing', 'handover', 'done'].includes(previousShift.status)) {
        return res.status(400).json({
          message: `Kh√¥ng th·ªÉ ch·ªçn ca ${shiftCode} khi ca ${previousShiftCode} ch∆∞a b·∫Øt ƒë·∫ßu ho·∫∑c kh√¥ng ·ªü tr·∫°ng th√°i ƒëang l√†m vi·ªác/b√†n giao`
        });
      }
    }

    // Ki·ªÉm tra ca tr∆∞·ªõc ƒë√≥ t·ª´ ng√†y tr∆∞·ªõc (cho ca ƒë·∫ßu ti√™n c·ªßa ng√†y)
    if (newShiftIndex === 1) {
      // L·∫•y ng√†y tr∆∞·ªõc ƒë√≥
      const previousDate = new Date(shiftDate);
      previousDate.setDate(previousDate.getDate() - 1);
      const previousDateStr = previousDate.toISOString().split('T')[0];

      // Danh s√°ch c√°c ca cu·ªëi c√πng c·ªßa ng√†y tr∆∞·ªõc
      const lastShifts = [
        { code: 'V2', group: 'V' },
        { code: 'H2', group: 'H' },
        { code: 'T3', group: 'T' }
      ];

      // Ki·ªÉm tra t·ª´ng ca cu·ªëi c·ªßa ng√†y tr∆∞·ªõc
      for (const lastShift of lastShifts) {
        const previousDayLastShift = await WorkShift.findOne({
          where: {
            code: lastShift.code,
            date: previousDateStr
          }
        });

        if (previousDayLastShift) {
          const userSession = await WorkSession.findOne({
            where: {
              userId: userId,
              workShiftId: previousDayLastShift.id,
              date: previousDateStr
            }
          });

          if (userSession) {
            return res.status(400).json({
              message: `B·∫°n ƒë√£ laÃÄm ca ${lastShift.code} ng√†y ${new Date(previousDateStr).toLocaleDateString('vi-VN')}, kh√¥ng th·ªÉ tham gia ca ${shiftCode} ng√†y ${new Date(shiftDate).toLocaleDateString('vi-VN')}`
            });
          }
        }
      }
    }

    // Ki·ªÉm tra tr·∫°ng th√°i ca tr∆∞·ªõc khi cho join
    if (shift && !['waiting', 'doing', 'done'].includes(shift.status)) {
      return res.status(400).json({
        message: 'Kh√¥ng th·ªÉ tham gia ca n√†y do ƒëang trong tr·∫°ng th√°i ' + shift.status
      });
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y ca, t·∫°o ca m·ªõi
    if (!shift) {
      const config = shiftConfig[shiftCode];
      if (!config) {
        throw new Error('M√£ ca kh√¥ng h·ª£p l·ªá');
      }

      // T·∫°o ca l√†m vi·ªác m·ªõi
      const newShift = await WorkShift.create({
        code: shiftCode,
        name: config.name,
        date: shiftDate,
        startTime: config.startTime,
        endTime: config.endTime,
        status: 'waiting',
        group: config.group,
        index: config.index,
        createdBy: userId
      });
      console.log('‚úÖ Created new shift:', newShift.toJSON());

      // T·∫°o WorkSession
      console.log('üìù Creating work session for:', { userId, shiftId: newShift.id, date: shiftDate });
      const workSession = await WorkSession.create({
        userId: userId,
        workShiftId: newShift.id,
        date: shiftDate,
        startedAt: new Date(),
        status: 'active'
      });
      console.log('‚úÖ Created work session:', workSession.toJSON());

      // Th√™m user v√†o shift
      console.log('üë§ Adding user to shift');
      await newShift.addUser(currentUser);

      // C·∫≠p nh·∫≠t workedUsers n·∫øu ch∆∞a c√≥
      if (!newShift.workedUsers?.find(u => u.id === currentUser.id)) {
        const workedUsers = newShift.workedUsers || [];
        workedUsers.push({
          id: currentUser.id,
          username: currentUser.username,
          fullname: currentUser.fullname
        });
        newShift.workedUsers = workedUsers;
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ca th√†nh 'doing'
      newShift.status = 'doing';
      await newShift.save();

      // L·∫•y th√¥ng tin ca ƒë√£ c·∫≠p nh·∫≠t
      const updatedShift = await WorkShift.findOne({
        where: { id: newShift.id },
        include: [{
          model: User,
          as: 'Users',
          attributes: ['id', 'username', 'fullname']
        }]
      });
      console.log('‚úÖ Updated shift:', updatedShift.toJSON());

      // C·∫≠p nh·∫≠t ShiftHandoverUsers v·ªõi danh s√°ch ng∆∞·ªùi d√πng hi·ªán t·∫°i
      const currentUsers = updatedShift.Users.map(user => ({
        id: user.id,
        username: user.username,
        fullname: user.fullname
      }));
      await updateShiftHandoverUsers(newShift.id, currentUsers);

      // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t form b√†n giao ƒëang pending
      const pendingHandover = await ShiftHandover.findOne({
        where: {
          toShiftId: newShift.id,
          status: 'pending'
        }
      });

      if (pendingHandover) {
        console.log('üìù Found pending handover:', pendingHandover.id);

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ trong ShiftHandoverUser ch∆∞a
        const existingHandoverUser = await ShiftHandoverUser.findOne({
          where: {
            shiftHandoverId: pendingHandover.id,
            userId: currentUser.id,
            role: 'receiver',
            type: 'to'
          }
        });

        // Ch·ªâ th√™m m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
        if (!existingHandoverUser) {
          await ShiftHandoverUser.create({
            shiftHandoverId: pendingHandover.id,
            userId: currentUser.id,
            role: 'receiver',
            type: 'to'
          });
          console.log('‚ûï Added user to ShiftHandoverUser:', currentUser.id);
        } else {
          console.log('‚ÑπÔ∏è User already exists in ShiftHandoverUser:', currentUser.id);
        }
      }

      // Broadcast update
      sendShiftUpdate(updatedShift, 'select', null, null, currentUser.id, currentUser.fullname);

      return res.json({
        message: 'ƒê√£ ch·ªçn ca th√†nh c√¥ng',
        shift: updatedShift
      });
    }

    try {
      // T·∫°o WorkSession
      console.log('üìù Creating work session for:', { userId, shiftId: shift.id, date: shiftDate });
      const workSession = await WorkSession.create({
        userId: userId,
        workShiftId: shift.id,
        date: shiftDate,
        startedAt: new Date(),
        status: 'active'
      });
      console.log('‚úÖ Created work session:', workSession.toJSON());

      // Th√™m user v√†o shift
      console.log('üë§ Adding user to shift');
      await shift.addUser(currentUser);

      // C·∫≠p nh·∫≠t workedUsers n·∫øu ch∆∞a c√≥
      if (!shift.workedUsers?.find(u => u.id === currentUser.id)) {
        const workedUsers = shift.workedUsers || [];
        workedUsers.push({
          id: currentUser.id,
          username: currentUser.username,
          fullname: currentUser.fullname
        });
        shift.workedUsers = workedUsers;
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ca th√†nh 'doing'
      shift.status = 'doing';
      await shift.save();

      // L·∫•y th√¥ng tin ca ƒë√£ c·∫≠p nh·∫≠t
      const updatedShift = await WorkShift.findOne({
        where: { id: shift.id },
        include: [{
          model: User,
          as: 'Users',
          attributes: ['id', 'username', 'fullname']
        }]
      });
      console.log('‚úÖ Updated shift:', updatedShift.toJSON());

      // C·∫≠p nh·∫≠t ShiftHandoverUsers
      await updateShiftHandoverUsers(shift.id, shift.workedUsers);

      // T√¨m t·∫•t c·∫£ bi√™n b·∫£n b√†n giao m√† ca hi·ªán t·∫°i l√† b√™n giao
      const fromHandovers = await ShiftHandover.findAll({
        where: {
          fromShiftId: shift.id
        }
      });

      // Th√™m user v√†o ShiftHandoverUser cho t·∫•t c·∫£ bi√™n b·∫£n b√†n giao
      for (const handover of fromHandovers) {
        const existingFromUser = await ShiftHandoverUser.findOne({
          where: {
            shiftHandoverId: handover.id,
            userId: currentUser.id,
            role: 'handover',
            type: 'from'
          }
        });

        if (!existingFromUser) {
          await ShiftHandoverUser.create({
            shiftHandoverId: handover.id,
            userId: currentUser.id,
            role: 'handover',
            type: 'from'
          });
          console.log('‚ûï Added user to ShiftHandoverUser as from:', currentUser.id);

          // C·∫≠p nh·∫≠t l·∫°i danh s√°ch FromUsers trong bi√™n b·∫£n
          const fromUsers = handover.FromUsers || [];
          fromUsers.push({
            id: currentUser.id,
            username: currentUser.username,
            fullname: currentUser.fullname
          });
          await handover.update({ fromUsers });
          console.log('‚úÖ Updated handover fromUsers list');
        }
      }

      // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t form b√†n giao ƒëang pending cho b√™n nh·∫≠n
      const pendingToHandovers = await ShiftHandover.findAll({
        where: {
          toShiftId: shift.id,
          status: 'pending'
        }
      });

      for (const handover of pendingToHandovers) {
        console.log('üìù Processing pending handover:', handover.id);

        // Ki·ªÉm tra xem user ƒë√£ c√≥ trong ToUsers ch∆∞a
        const existingToUser = await ShiftHandoverUser.findOne({
          where: {
            shiftHandoverId: handover.id,
            userId: currentUser.id,
            role: 'receiver',
            type: 'to'
          }
        });

        // Th√™m user v√†o ToUsers n·∫øu ch∆∞a c√≥
        if (!existingToUser) {
          await ShiftHandoverUser.create({
            shiftHandoverId: handover.id,
            userId: currentUser.id,
            role: 'receiver',
            type: 'to'
          });
          console.log('‚ûï Added user to ToUsers:', currentUser.id);

          // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ToUsers trong bi√™n b·∫£n
          const toUsers = handover.ToUsers || [];
          toUsers.push({
            id: currentUser.id,
            username: currentUser.username,
            fullname: currentUser.fullname
          });
          await handover.update({ toUsers });
          console.log('‚úÖ Updated handover toUsers list');
        }
      }

      // Broadcast update
      sendShiftUpdate(updatedShift, 'select', null, null, currentUser.id, currentUser.fullname);

      return res.json({
        message: 'Ch·ªçn ca th√†nh c√¥ng',
        shift: updatedShift
      });
    } catch (error) {
      console.error('‚ùå Error in shift operations:', error);
      console.error('‚ùå Error stack:', error.stack);
      return res.status(500).json({ message: 'L·ªói khi th√™m ng∆∞·ªùi d√πng v√†o ca' });
    }
  } catch (error) {
    console.error('‚ùå Error in selectShift:', error);
    console.error('‚ùå Error stack:', error.stack);
    res.status(500).json({ message: 'L·ªói khi ch·ªçn ca', error: error.message });
  }
};

// Thay ƒë·ªïi ca
export const changeShift = async (req, res) => {
  try {
    const { shiftCode } = req.body;
    const userId = req.user.id;
    const today = new Date().toISOString().split('T')[0];

    console.log('üîÑ Changing shift:', { shiftCode, userId, today });

    // L·∫•y th√¥ng tin user hi·ªán t·∫°i
    const currentUser = await User.findByPk(userId);
    if (!currentUser) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng' });
    }
    console.log('üë§ Current user:', currentUser.toJSON());

    // L·∫•y ca hi·ªán t·∫°i c·ªßa user
    const currentSession = await WorkSession.findOne({
      where: {
        userId,
        date: today,
        status: 'active'
      },
      include: [{
        model: WorkShift,
        as: 'WorkShift'
      }]
    });
    console.log('üîç Current session:', currentSession?.toJSON());

    if (!currentSession) {
      return res.status(400).json({ message: 'B·∫°n ch∆∞a tham gia ca n√†o h√¥m nay' });
    }

    // L·∫•y t·∫•t c·∫£ ca trong ng√†y ƒë·ªÉ ki·ªÉm tra th·ª© t·ª±
    const allShifts = await WorkShift.findAll({
      where: { date: today },
      order: [['code', 'ASC']]
    });
    console.log('üìÖ All shifts:', allShifts.map(s => s.toJSON()));

    // Ki·ªÉm tra xem ca hi·ªán t·∫°i c√≥ ph·∫£i l√† ca cu·ªëi c√πng kh√¥ng
    const currentShiftIndex = allShifts.findIndex(s => s.code === currentSession.WorkShift.code);
    const newShiftIndex = allShifts.findIndex(s => s.code === shiftCode);

    if (currentShiftIndex === -1 || newShiftIndex === -1) {
      return res.status(400).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ca' });
    }

    // Ki·ªÉm tra xem c√≥ ƒëang c·ªë ch·ªçn ca li·ªÅn k·ªÅ kh√¥ng
    const { isConsecutive, prevCode, newCode } = checkConsecutiveShifts([currentSession.WorkShift.code], shiftCode);
    console.log('üîç Consecutive check result:', {
      isConsecutive,
      prevCode,
      newCode
    });

    if (isConsecutive) {
      console.log('‚ùå Cannot select consecutive shift:', { prevCode, newCode });
      return res.status(400).json({
        message: `Kh√¥ng th·ªÉ chuy·ªÉn sang ca ${newCode} sau khi ƒë√£ l√†m ca ${prevCode}. Vui l√≤ng ch·ªçn ca kh√°c.`
      });
    }

    // T√¨m ca m·ªõi
    let newShift = await WorkShift.findOne({
      where: { code: shiftCode, date: today }
    });
    console.log('üîç Found new shift:', newShift?.toJSON());

    if (!newShift) {
      // T·∫°o ca m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
      newShift = await WorkShift.create({
        code: shiftCode,
        name: shiftCode,
        date: today,
        status: 'waiting',
        createdBy: userId,
        workedUsers: [{
          id: currentUser.id,
          username: currentUser.username,
          fullname: currentUser.fullname
        }]
      });
      console.log('‚úÖ Created new shift:', newShift.toJSON());
    } else if (newShift.status === 'done') {
      return res.status(400).json({ message: 'Ca n√†y ƒë√£ k·∫øt th√∫c' });
    }

    try {
      // K·∫øt th√∫c ca hi·ªán t·∫°i
      currentSession.status = 'done';
      currentSession.endedAt = new Date();
      await currentSession.save();

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ca hi·ªán t·∫°i
      const currentShift = currentSession.WorkShift;
      currentShift.status = 'waiting'; // Lu√¥n ƒë√°nh d·∫•u l√† waiting ƒë·ªÉ ng∆∞·ªùi kh√°c c√≥ th·ªÉ v√†o
      await currentShift.save();

      // T·∫°o WorkSession m·ªõi
      console.log('üìù Creating new work session for:', { userId, shiftId: newShift.id, date: today });
      const newSession = await WorkSession.create({
        userId: userId,
        workShiftId: newShift.id,
        date: today,
        startedAt: new Date(),
        status: 'active'
      });
      console.log('‚úÖ Created new work session:', newSession.toJSON());

      // Th√™m user v√†o ca m·ªõi
      console.log('üë§ Adding user to new shift');
      await newShift.addUser(currentUser);

      // C·∫≠p nh·∫≠t workedUsers n·∫øu ch∆∞a c√≥
      if (!newShift.workedUsers?.find(u => u.id === currentUser.id)) {
        const workedUsers = newShift.workedUsers || [];
        workedUsers.push({
          id: currentUser.id,
          username: currentUser.username,
          fullname: currentUser.fullname
        });
        newShift.workedUsers = workedUsers;
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ca m·ªõi th√†nh 'doing'
      newShift.status = 'doing';
      await newShift.save();

      // L·∫•y th√¥ng tin ca ƒë√£ c·∫≠p nh·∫≠t
      const updatedShift = await WorkShift.findOne({
        where: { id: newShift.id },
        include: [{
          model: User,
          as: 'Users',
          attributes: ['id', 'username', 'fullname']
        }]
      });
      console.log('‚úÖ Updated shift:', updatedShift.toJSON());

      // C·∫≠p nh·∫≠t ShiftHandoverUsers v·ªõi danh s√°ch ng∆∞·ªùi d√πng hi·ªán t·∫°i
      const currentUsers = updatedShift.Users.map(user => ({
        id: user.id,
        username: user.username,
        fullname: user.fullname
      }));
      await updateShiftHandoverUsers(newShift.id, currentUsers);

      // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t form b√†n giao ƒëang pending
      const pendingHandover = await ShiftHandover.findOne({
        where: {
          toShiftId: newShift.id,
          status: 'pending'
        }
      });

      if (pendingHandover) {
        console.log('üìù Found pending handover:', pendingHandover.id);

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ trong ShiftHandoverUser ch∆∞a
        const existingHandoverUser = await ShiftHandoverUser.findOne({
          where: {
            shiftHandoverId: pendingHandover.id,
            userId: currentUser.id,
            role: 'receiver',
            type: 'to'
          }
        });

        // Ch·ªâ th√™m m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
        if (!existingHandoverUser) {
          await ShiftHandoverUser.create({
            shiftHandoverId: pendingHandover.id,
            userId: currentUser.id,
            role: 'receiver',
            type: 'to'
          });
          console.log('‚ûï Added user to ShiftHandoverUser:', currentUser.id);
        } else {
          console.log('‚ÑπÔ∏è User already exists in ShiftHandoverUser:', currentUser.id);
        }
      }

      // Broadcast update
      sendShiftUpdate(updatedShift, 'exit', null, null, currentUser.id, currentUser.fullname);

      return res.json({
        message: 'ƒê√£ tho√°t ca th√†nh c√¥ng',
        shift: updatedShift
      });
    } catch (error) {
      console.error('‚ùå Error in shift operations:', error);
      console.error('‚ùå Error stack:', error.stack);
      return res.status(500).json({ message: 'L·ªói khi chuy·ªÉn ca' });
    }
  } catch (error) {
    console.error('‚ùå Error in changeShift:', error);
    console.error('‚ùå Error stack:', error.stack);
    return res.status(500).json({ message: 'L·ªói server khi chuy·ªÉn ca' });
  }
};

// K·∫øt th√∫c ca l√†m vi·ªác
export const closeShift = async (req, res) => {
  try {
    const shiftId = req.params.shiftId;
    const currentUser = req.user;

    console.log('üîÑ Closing shift:', { shiftId, userId: currentUser.id });

    // T√¨m ca l√†m vi·ªác v√† ki·ªÉm tra tr·∫°ng th√°i
    const shift = await db.WorkShift.findOne({
      where: { id: shiftId },
      include: [
        {
          model: db.User,
          attributes: ['id', 'username', 'fullname', 'role']
        },
        {
          model: db.ShiftHandover,
          as: 'HandoversFrom',
          where: { status: 'pending' },
          required: false
        }
      ]
    });

    if (!shift) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác' });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i ca
    if (shift.status !== 'done') {
      return res.status(400).json({ message: 'Ca l√†m vi·ªác ch∆∞a ƒë∆∞·ª£c b√†n giao xong' });
    }

    // Ki·ªÉm tra c√≤n form b√†n giao ƒëang ch·ªù kh√¥ng
    if (shift.HandoversFrom?.length > 0) {
      return res.status(400).json({ message: 'V·∫´n c√≤n form b√†n giao ƒëang ch·ªù x√°c nh·∫≠n' });
    }

    // ‚úÖ B·∫Øt ƒë·∫ßu transaction
    await db.sequelize.transaction(async (t) => {
      // 1. C·∫≠p nh·∫≠t tr·∫°ng th√°i ca l√†m vi·ªác
      await shift.update({
        status: 'closed',
        closedAt: new Date(),
        closedBy: currentUser.id
      }, { transaction: t });

      // 2. Th√™m log
      await db.AuditLog.create({
        action: 'CLOSE_SHIFT',
        userId: currentUser.id,
        details: {
          shiftId: shift.id,
          shiftCode: shift.code
        }
      }, { transaction: t });
    });

    // ‚úÖ L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß ƒë·ªÉ tr·∫£ v·ªÅ
    const fullShift = await db.WorkShift.findByPk(shiftId, {
      include: [
        {
          model: db.User,
          attributes: ['id', 'username', 'fullname', 'role']
        },
        {
          model: db.ShiftHandover,
          as: 'HandoversFrom',
          include: [
            {
              model: db.WorkShift,
              as: 'ToShift',
              attributes: ['id', 'code', 'date', 'status']
            }
          ]
        },
        {
          model: db.ShiftHandover,
          as: 'HandoversTo',
          include: [
            {
              model: db.WorkShift,
              as: 'FromShift',
              attributes: ['id', 'code', 'date', 'status']
            }
          ]
        }
      ]
    });

    res.json({
      message: 'ƒê√≥ng ca th√†nh c√¥ng',
      shift: fullShift
    });
  } catch (error) {
    console.error('‚ùå Error in closeShift:', error);
    res.status(500).json({
      message: 'L·ªói khi ƒë√≥ng ca',
      error: error.message
    });
  }
};


// L·∫•y ca hi·ªán t·∫°i c·ªßa user
export const getCurrentShift = async (req, res) => {
  try {
    const userId = req.user.id;

    console.log('üîç Getting current shift for user:', { userId });

    // T√¨m ca l√†m vi·ªác hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng (kh√¥ng ph·ª• thu·ªôc v√†o ng√†y)
    const currentWorkSession = await WorkSession.findOne({
      where: {
        userId: userId,
        status: 'active'
      },
      include: [{
        model: WorkShift,
        as: 'WorkShift',
        attributes: ['id', 'code', 'name', 'status', 'date', 'workedUsers'],
        include: [{
          model: User,
          as: 'Users',
          through: { attributes: [] },
          attributes: ['id', 'username', 'fullname']
        }]
      }]
    });

    if (!currentWorkSession) {
      return res.json({ shift: null });
    }

    // L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß c·ªßa ca
    const shift = currentWorkSession.WorkShift;

    // ƒê·∫£m b·∫£o workedUsers lu√¥n l√† m·ªôt m·∫£ng
    if (!shift.workedUsers) {
      shift.workedUsers = shift.Users.map(user => ({
        id: user.id,
        username: user.username,
        fullname: user.fullname
      }));
      await shift.save();
    }

    return res.json({
      shift: {
        id: shift.id,
        code: shift.code,
        name: shift.name,
        status: shift.status,
        date: shift.date,
        workedUsers: shift.workedUsers,
        currentUsers: shift.Users.map(user => ({
          id: user.id,
          username: user.username,
          fullname: user.fullname
        }))
      }
    });
  } catch (error) {
    console.error('‚ùå Error in getCurrentShift:', error);
    return res.status(500).json({ message: 'L·ªói server khi l·∫•y th√¥ng tin ca hi·ªán t·∫°i' });
  }
};


export const getAllShifts = async (req, res) => {
  try {
    const { page = 1, limit = 15, date, status, code } = req.query;
    const offset = (page - 1) * limit;

    // Build where clause
    const where = {};
    if (date) {
      where.date = date;
    }
    if (status) {
      where.status = status;
    }
    if (code) {
      where.code = code;
    }

    // Get total count
    const total = await WorkShift.count({ where });

    // Get paginated shifts with user information
    const shifts = await WorkShift.findAll({
      where,
      attributes: ['id', 'code', 'name', 'status', 'date',],
      include: [
        {
          model: User,
          as: 'Users',
          through: { attributes: [] },
          attributes: ['id', 'username', 'fullname', 'role']
        },
        {
          model: WorkSession,
          as: 'WorkSessions',
          where: { status: 'active' },
          required: false,
          include: [{
            model: User,
            as: 'User',
            attributes: ['id', 'username', 'fullname', 'role']
          }]
        }
      ],
      order: [['date', 'DESC'], ['code', 'ASC']],
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    // Format the response to include both Users and active WorkSessions
    const formattedShifts = shifts.map(shift => {
      const shiftData = shift.toJSON();
      // Combine Users and active WorkSessions
      const allUsers = new Set();

      // Add users from Users relation
      shift.Users.forEach(user => {
        allUsers.add(JSON.stringify({
          id: user.id,
          username: user.username,
          fullname: user.fullname,
          role: user.role
        }));
      });

      // Add users from active WorkSessions
      shift.WorkSessions.forEach(session => {
        if (session.User) {
          allUsers.add(JSON.stringify({
            id: session.User.id,
            username: session.User.username,
            fullname: session.User.fullname,
            role: session.User.role
          }));
        }
      });

      // Convert back to objects and remove duplicates
      shiftData.users = Array.from(allUsers).map(userStr => JSON.parse(userStr));
      delete shiftData.WorkSessions; // Remove WorkSessions from response

      return shiftData;
    });

    res.json({
      shifts: formattedShifts,
      total,
      page: parseInt(page),
      limit: parseInt(limit),
      totalPages: Math.ceil(total / limit)
    });
  } catch (error) {
    console.error('Error getting all shifts:', error);
    res.status(500).json({ message: 'Error getting shifts' });
  }
};

export const getTodayAvailableShifts = async (req, res) => {
  try {
    const userId = req.user.id;
    const today = getCurrentDateUTC7();
    const previousDay = new Date(today);
    previousDay.setDate(previousDay.getDate() - 1);
    const previousDayStr = previousDay.toISOString().split('T')[0];

    // L·∫•y t·∫•t c·∫£ c√°c ca c·ªßa ng√†y h√¥m nay v√† h√¥m tr∆∞·ªõc
    const shifts = await WorkShift.findAll({
      where: {
        date: {
          [Op.in]: [today, previousDayStr]
        }
      },
      include: [{
        model: User,
        as: 'Users',
        attributes: ['id', 'fullname', 'username']
      }],
      order: [['date', 'DESC'], ['code', 'ASC']]
    });

    // L·∫•y ca hi·ªán t·∫°i c·ªßa user
    const currentUserShift = await WorkSession.findOne({
      where: { userId },
      include: [{
        model: WorkShift,
        as: 'WorkShift',
        where: {
          date: {
            [Op.in]: [today, previousDayStr]
          },
          status: {
            [Op.in]: ['waiting', 'doing', 'handover']
          }
        }
      }]
    });

    ;

    // T·∫°o danh s√°ch c√°c ca c·ªë ƒë·ªãnh
    // const FIXED_SHIFTS = ['T1', 'T2', 'T3', 'H1', 'H2', 'V1', 'V2'];

    // T·∫°o k·∫øt qu·∫£ cho c·∫£ ng√†y h√¥m nay v√† h√¥m tr∆∞·ªõc
    const result = [];

    // Th√™m c√°c ca c·ªßa ng√†y h√¥m nay
    FIXED_SHIFTS.forEach(code => {
      const existingShift = shifts.find(s => s.code === code && s.date === today);

      if (existingShift) {
        const isCurrentShift = currentUserShift?.WorkShift.id === existingShift.id;
        result.push({
          ...existingShift.toJSON(),
          exists: true,
          available: existingShift.status !== 'done' && !isCurrentShift,
          isCurrentShift,
          status: existingShift.status || 'waiting'
        });
      } else {
        result.push({
          id: null,
          code,
          date: today,
          status: 'not-started',
          exists: false,
          available: true,
          isCurrentShift: false,
          Users: []
        });
      }
    });

    // Th√™m c√°c ca c·ªßa ng√†y h√¥m tr∆∞·ªõc
    FIXED_SHIFTS.forEach(code => {
      const existingShift = shifts.find(s => s.code === code && s.date === previousDayStr);

      if (existingShift) {
        const isCurrentShift = currentUserShift?.WorkShift.id === existingShift.id;
        result.push({
          ...existingShift.toJSON(),
          exists: true,
          available: existingShift.status !== 'done' && !isCurrentShift,
          isCurrentShift,
          status: existingShift.status || 'waiting'
        });
      } else {
        result.push({
          id: null,
          code,
          date: previousDayStr,
          status: 'not-started',
          exists: false,
          available: true,
          isCurrentShift: false,
          Users: []
        });
      }
    });

    res.json(result);
  } catch (error) {
    console.error('‚ùå getTodayAvailableShifts error:', error);
    res.status(500).json({ error: 'L·ªói khi l·∫•y danh s√°ch ca' });
  }
};

// B√†n giao ca
export const handoverShift = async (req, res) => {
  try {
    const { id } = req.params;
    const { receiveUserIds } = req.body;
    const handoverUserId = req.user.id;

    console.log('üîÑ Handing over shift:', { workShiftId: id, handoverUserId, receiveUserIds });

    // Ki·ªÉm tra ca t·ªìn t·∫°i
    const workShift = await WorkShift.findByPk(id);
    if (!workShift) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác' });
    }

    // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ thu·ªôc ca kh√¥ng
    const isUserInShift = await WorkSession.findOne({
      where: {
        userId: handoverUserId,
        workShiftId: id
      }
    });

    if (!isUserInShift) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng thu·ªôc ca n√†y' });
    }

    // Ki·ªÉm tra form ƒë√£ t·ªìn t·∫°i ch∆∞a
    let form = await ShiftCheckForm.findOne({
      where: { workShiftId: id }
    });

    if (!form) {
      // N·∫øu ch∆∞a c√≥ form, t·∫°o m·ªõi
      form = await ShiftCheckForm.create({
        workShiftId: id,
        status: 'handover',
        formData: JSON.stringify({})  // T·∫°o form tr·ªëng
      });
      console.log('‚úÖ Created new form:', form.id);
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i form v√† ca
    await form.update({ status: 'handover' });
    await workShift.update({ status: 'handover' });

    // L·∫•y th√¥ng tin ng∆∞·ªùi trong ca hi·ªán t·∫°i
    const currentShiftUsers = await WorkSession.findAll({
      where: { workShiftId: id },
      include: [{
        model: User,
        attributes: ['id', 'username', 'fullname']
      }]
    });

    // L·∫•y th√¥ng tin ng∆∞·ªùi trong ca ti·∫øp theo s·ª≠ d·ª•ng shiftConfig
    const currentShiftConfig = shiftConfig[workShift.code];
    if (!currentShiftConfig) {
      console.log('‚ùå Invalid shift code:', workShift.code);
      return res.status(400).json({
        message: 'M√£ ca kh√¥ng h·ª£p l·ªá'
      });
    }

    // T√¨m ca ti·∫øp theo trong c√πng nh√≥m
    const groupShifts = Object.entries(shiftConfig)
      .filter(([code, cfg]) => cfg.group === currentShiftConfig.group)
      .sort((a, b) => a[1].index - b[1].index);

    const currentIdx = groupShifts.findIndex(([code]) => code === workShift.code);
    let nextIndex = currentIdx + 1;

    // N·∫øu l√† ca cu·ªëi c√πng trong nh√≥m, quay v·ªÅ ca ƒë·∫ßu ti√™n
    if (nextIndex >= groupShifts.length) {
      nextIndex = 0;
    }

    const nextShiftCode = groupShifts[nextIndex][0];

    const nextShift = await WorkShift.findOne({
      where: {
        code: nextShiftCode,
        date: workShift.date,
        status: 'waiting'
      },
      include: [{
        model: User,
        as: 'Users',
        through: { attributes: [] },
        attributes: ['id', 'username', 'fullname']
      }]
    });

    // L·∫•y th√¥ng tin form ƒë√£ c·∫≠p nh·∫≠t
    const updatedForm = await ShiftCheckForm.findByPk(form.id, {
      include: [
        {
          model: WorkShift,
          as: 'workShift',
          include: [{
            model: User,
            as: 'Users',
            through: { attributes: [] },
            attributes: ['id', 'username', 'fullname']
          }]
        }
      ]
    });

    res.status(200).json({
      message: 'B√†n giao ca th√†nh c√¥ng',
      data: {
        ...updatedForm.toJSON(),
        formData: JSON.parse(updatedForm.formData || '{}'),
        handoverUsers: currentShiftUsers.map(us => ({
          id: us.User.id,
          username: us.User.username,
          fullname: us.User.fullname
        })),
        receiveUsers: nextShift ? nextShift.Users.map(user => ({
          id: user.id,
          username: user.username,
          fullname: user.fullname
        })) : []
      }
    });
  } catch (error) {
    console.error('‚ùå L·ªói b√†n giao ca:', error);
    res.status(500).json({
      message: 'L·ªói server khi b√†n giao ca',
      error: error.message
    });
  }
};

// Tho√°t ho·∫∑c h·ªßy ch·ªçn ca
export const exitShift = async (req, res) => {
  try {
    const userId = req.user.id;
    const today = new Date().toISOString().split('T')[0];

    console.log('üö™ Exiting shift for user:', { userId, today });

    // 1. T√¨m session hi·ªán t·∫°i
    const currentSession = await WorkSession.findOne({
      where: {
        userId,
        status: 'active'
      },
      include: [{
        model: WorkShift,
        as: 'WorkShift'
      }]
    });

    if (!currentSession) {
      return res.status(400).json({ message: 'B·∫°n ch∆∞a tham gia ca n√†o ho·∫∑c ƒë√£ k·∫øt th√∫c ca tr∆∞·ªõc ƒë√≥' });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa ca (ch·ªâ cho ph√©p tho√°t n·∫øu ca ƒëang waiting ho·∫∑c doing)
    const ShiftInfo = await WorkShift.findByPk(currentSession.workShiftId, {
      include: [{ model: User, as: 'Users', through: { attributes: [] } }]
    });

    if (!ShiftInfo) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ca hi·ªán t·∫°i!' });
    }

    if (!['waiting', 'doing'].includes(ShiftInfo.status)) {
      return res.status(400).json({
        message: `B·∫°n ch·ªâ c√≥ th·ªÉ tho√°t ca khi ch∆∞a b√†n giao`
      });
    }


    // 2. Ki·ªÉm tra s·ªë l∆∞·ª£ng ng∆∞·ªùi c√≤n l·∫°i trong ca
    const remainingSessions = await WorkSession.findAll({
      where: {
        workShiftId: currentSession.workShiftId,
        status: 'active'  // B·ªè ƒëi·ªÅu ki·ªán date v√¨ c√≥ th·ªÉ g√¢y l·ªói
      },
      include: [{
        model: User,
        as: 'User',
        attributes: ['id', 'username', 'fullname']
      }]
    });

    console.log('üîç All active sessions in shift:', remainingSessions.map(s => ({
      userId: s.User.id,
      username: s.User.username,
      status: s.status,
      date: s.date
    })));

    // L·ªçc ra nh·ªØng ng∆∞·ªùi kh√°c ngo√†i user hi·ªán t·∫°i
    const otherUsers = remainingSessions.filter(s => s.User.id !== userId);
    console.log('üîç Other users in shift:', otherUsers.map(s => ({
      userId: s.User.id,
      username: s.User.username,
      status: s.status,
      date: s.date
    })));

    // 3. Ki·ªÉm tra n·∫øu ca hi·ªán t·∫°i c√≥ b√†n giao t·ª´ ca tr∆∞·ªõc
    const receivedHandover = await ShiftHandover.findOne({
      where: {
        toShiftId: currentSession.workShiftId,
        status: 'completed'
      },
      include: [{
        model: User,
        as: 'ToUsers',
        through: {
          model: ShiftHandoverUser,
          where: {
            userId: userId,
            role: 'confirmer',  // Ki·ªÉm tra role l√† confirmer
            type: 'to'
          }
        },
        attributes: ['id', 'username', 'fullname']
      }]
    });

    console.log('üîç Received handover check:', {
      hasHandover: !!receivedHandover,
      handoverId: receivedHandover?.id,
      handoverStatus: receivedHandover?.status,
      toUsers: receivedHandover?.ToUsers?.map(u => u.id)
    });

    // Ki·ªÉm tra xem user c√≥ ph·∫£i l√† ng∆∞·ªùi x√°c nh·∫≠n trong handover kh√¥ng
    const isUserConfirmer = receivedHandover?.ToUsers?.length > 0;
    console.log('üîç Is user confirmer:', isUserConfirmer);

    // N·∫øu l√† ng∆∞·ªùi x√°c nh·∫≠n th√¨ kh√¥ng cho ph√©p tho√°t ca
    if (isUserConfirmer) {
      console.log('‚ùå Blocking exit: User is confirmer');
      return res.status(403).json({ message: 'B·∫°n l√† ng∆∞·ªùi x√°c nh·∫≠n b√†n giao t·ª´ ca tr∆∞·ªõc, kh√¥ng th·ªÉ tho√°t ca!' });
    }

    // N·∫øu l√† ng∆∞·ªùi duy nh·∫•t trong ca th√¨ kh√¥ng cho ph√©p tho√°t
    /* if (otherUsers.length === 0) {
      console.log('‚ùå Blocking exit: User is last person');
      return res.status(403).json({ message: 'B·∫°n l√† ng∆∞·ªùi duy nh·∫•t trong ca, kh√¥ng th·ªÉ tho√°t ca!' });
    } */

    console.log('‚úÖ Allowing exit: User is not confirmer and not last person');
    // 4. Xo√° session
    await currentSession.destroy();
    console.log('‚úÖ Deleted current work session');

    // --- B·ªï sung: X√≥a user kh·ªèi ShiftHandoverUser li√™n quan ƒë·∫øn ca n√†y ---
    const relatedHandovers = await ShiftHandover.findAll({
      where: {
        [Op.or]: [
          { fromShiftId: currentSession.workShiftId },
          { toShiftId: currentSession.workShiftId }
        ]
      },
      attributes: ['id']
    });
    const relatedHandoverIds = relatedHandovers.map(h => h.id);
    if (relatedHandoverIds.length > 0) {
      await ShiftHandoverUser.destroy({
        where: {
          userId,
          shiftHandoverId: { [Op.in]: relatedHandoverIds }
        }
      });
      console.log('üóëÔ∏è ƒê√£ x√≥a user kh·ªèi ShiftHandoverUser khi tho√°t ca:', userId);
    }
    // --- End b·ªï sung ---

    const currentShift = await WorkShift.findByPk(currentSession.workShiftId, {
      include: [{ model: User, as: 'Users', through: { attributes: [] } }]
    });

    if (!currentShift) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ca hi·ªán t·∫°i' });
    }

    // 5. C·∫≠p nh·∫≠t l·∫°i danh s√°ch workedUsers
    const updatedWorkedUsers = currentShift.Users
      .filter(user => user.id !== userId)
      .map(user => ({
        id: user.id,
        username: user.username,
        fullname: user.fullname
      }));

    await currentShift.update({ workedUsers: updatedWorkedUsers });

    // 6. C·∫≠p nh·∫≠t ShiftHandoverUser n·∫øu c·∫ßn
    await updateShiftHandoverUsers(currentShift.id, updatedWorkedUsers);

    // 7. N·∫øu c√≥ b√†n giao t·ª´ ca tr∆∞·ªõc, c·∫≠p nh·∫≠t l·∫°i danh s√°ch ng∆∞·ªùi nh·∫≠n
    if (receivedHandover) {
      const updatedToUsers = receivedHandover.ToUsers
        .filter(user => user.id !== userId)
        .map(user => ({
          id: user.id,
          username: user.username,
          fullname: user.fullname
        }));

      await receivedHandover.update({
        toUsers: updatedToUsers
      });
      console.log('‚úÖ Updated handover toUsers list');
    }

    // 8. Ki·ªÉm tra n·∫øu kh√¥ng c√≤n ai trong ca -> x·ª≠ l√Ω xo√° ca, bi√™n b·∫£n nh√°p v√† shiftcheckform
    if (otherUsers.length === 0) {
      console.log('‚ÑπÔ∏è No active users left in shift, checking for draft handovers');

      const handovers = await ShiftHandover.findAll({
        where: {
          fromShiftId: currentShift.id,
          status: 'draft'
        },
        include: [
          { model: User, as: 'FromUsers' },
          { model: User, as: 'ToUsers' }
        ]
      });

      for (const handover of handovers) {
        const fromUsers = handover.FromUsers || [];
        const toUsers = handover.ToUsers || [];

        const isUserOnlyPerson =
          fromUsers.length === 1 &&
          fromUsers[0].id === userId &&
          toUsers.length === 0;

        if (isUserOnlyPerson) {
          await handover.destroy();
          console.log('üóëÔ∏è Deleted draft handover:', handover.id);
        } else {
          console.log('‚ö†Ô∏è Skipped handover (still has other users):', handover.id);
        }
      }

      // X√≥a ShiftCheckForm v√† ShiftCheckItem li√™n quan
      const shiftCheckForms = await ShiftCheckForm.findAll({
        where: {
          workShiftId: currentShift.id
        }
      });

      for (const form of shiftCheckForms) {
        await ShiftCheckItem.destroy({
          where: {
            formId: form.id
          }
        });
        await form.destroy();
        console.log('üóëÔ∏è Deleted shift check form and items:', form.id);
      }

      await currentShift.update({ status: 'waiting' });
      console.log('‚úÖ Set shift to wating:', currentShift.id);
    }

    // Broadcast update
    sendShiftUpdate(currentShift, 'exit', null, null, req.user.id, req.user.fullname);

    return res.json({
      message: 'ƒê√£ tho√°t ca th√†nh c√¥ng',
      shift: currentShift
    });
  } catch (error) {
    console.error('‚ùå Error in exitShift:', error);
    return res.status(500).json({ message: 'L·ªói server khi tho√°t ca' });
  }
};

// L·∫•y danh s√°ch ng∆∞·ªùi trong ca ti·∫øp theo
export const getNextShiftUsers = async (req, res) => {
  try {
    const { formId } = req.params;
    const userId = req.user.id;
    console.log('üîç Getting next shift users:', { formId, userId });

    let currentShift;
    if (formId) {
      // 1. L·∫•y th√¥ng tin form v√† ca hi·ªán t·∫°i
      const form = await ShiftCheckForm.findByPk(formId, {
        include: [{
          model: WorkShift,
          as: 'workShift',
          include: [{
            model: User,
            as: 'Users',
            through: { attributes: [] },
            attributes: ['id', 'username', 'fullname']
          }]
        }]
      });

      if (!form) {
        console.log('‚ùå Form not found:', formId);
        return res.status(404).json({
          message: 'Kh√¥ng t√¨m th·∫•y bi√™n b·∫£n'
        });
      }

      currentShift = form.workShift;
    } else {
      // L·∫•y ca hi·ªán t·∫°i c·ªßa user
      const currentUserShift = await WorkSession.findOne({
        where: {
          userId
        },
        include: [{
          model: WorkShift,
          where: {
            status: {
              [Op.ne]: 'done'  // kh√¥ng l·∫•y ca ƒë√£ done
            }
          }
        }]
      });

      if (!currentUserShift) {
        console.log('‚ÑπÔ∏è No active shift found for user');
        return res.status(200).json({
          users: [],
          message: 'B·∫°n ch∆∞a tham gia ca n√†o ho·∫∑c ƒë√£ k·∫øt th√∫c ca tr∆∞·ªõc ƒë√≥'
        });
      }

      currentShift = currentUserShift.WorkShift;
    }

    console.log('üì• Current shift:', currentShift.toJSON());

    // 2. X√°c ƒë·ªãnh ca ti·∫øp theo s·ª≠ d·ª•ng shiftConfig
    const currentShiftConfig = shiftConfig[currentShift.code];
    if (!currentShiftConfig) {
      console.log('‚ùå Invalid shift code:', currentShift.code);
      return res.status(400).json({
        message: 'M√£ ca kh√¥ng h·ª£p l·ªá'
      });
    }

    // T√¨m ca ti·∫øp theo trong c√πng nh√≥m
    const groupShifts = Object.entries(shiftConfig)
      .filter(([code, cfg]) => cfg.group === currentShiftConfig.group)
      .sort((a, b) => a[1].index - b[1].index);

    const currentIdx = groupShifts.findIndex(([code]) => code === currentShift.code);
    let nextIndex = currentIdx + 1;

    // N·∫øu l√† ca cu·ªëi c√πng trong nh√≥m, quay v·ªÅ ca ƒë·∫ßu ti√™n
    if (nextIndex >= groupShifts.length) {
      nextIndex = 0;
    }

    const nextShiftCode = groupShifts[nextIndex][0];

    console.log('üîÑ Next shift calculation:', {
      currentCode: currentShift.code,
      nextShiftCode,
      group: currentShiftConfig.group,
      currentIndex: currentShiftConfig.index
    });

    // Ch·ªâ t√¨m ca ti·∫øp theo trong c√πng ng√†y
    const nextShift = await WorkShift.findOne({
      where: {
        code: nextShiftCode,
        date: currentShift.date,  // Lu√¥n l·∫•y c√πng ng√†y
        status: 'waiting'  // Ch·ªâ l·∫•y ca c√≥ tr·∫°ng th√°i waiting
      },
      include: [{
        model: User,
        as: 'Users',
        through: { attributes: [] },
        attributes: ['id', 'username', 'fullname']
      }]
    });

    if (!nextShift) {
      console.log('‚ùå Next shift not found:', { nextShiftCode, date: currentShift.date });
      return res.status(200).json({
        users: [],
        message: 'Kh√¥ng t√¨m th·∫•y ca ti·∫øp theo ƒëang ch·ªù nh·∫≠n'
      });
    }

    console.log('üì• Next shift found:', {
      shiftCode: nextShift.code,
      date: nextShift.date,
      users: nextShift.Users.map(u => ({ id: u.id, username: u.username }))
    });

    // 4. Tr·∫£ v·ªÅ danh s√°ch ng∆∞·ªùi trong ca ti·∫øp theo
    res.json({
      users: nextShift.Users.map(user => ({
        id: user.id,
        username: user.username,
        fullname: user.fullname
      }))
    });
  } catch (err) {
    console.error('‚ùå getNextShiftUsers error:', err);
    res.status(500).json({
      message: 'L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi trong ca ti·∫øp theo',
      error: err.message
    });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ca l√†m vi·ªác
export const updateShiftStatus = async (req, res) => {
  try {
    const { shiftId } = req.params;
    const { status } = req.body;

    // Validate status
    const validStatuses = ['waiting', 'doing', 'handover', 'done'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'
      });
    }

    const shift = await WorkShift.findByPk(shiftId);
    if (!shift) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác'
      });
    }

    // Validate status transition
    if (shift.status === 'done' && status !== 'done') {
      return res.status(400).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i c·ªßa ca ƒë√£ ho√†n th√†nh'
      });
    }

    if (shift.status === 'doing' && status === 'done') {
      return res.status(400).json({
        success: false,
        message: 'Ca ph·∫£i ƒë∆∞·ª£c b√†n giao tr∆∞·ªõc khi ho√†n th√†nh'
      });
    }

    const oldStatus = shift.status;
    await shift.update({ status });

    // Broadcast update
    sendShiftUpdate(shift, 'status', oldStatus, status, req.user.id, req.user.fullname);

    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng',
      data: shift
    });
  } catch (err) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ca:', err);
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: err.message
    });
  }
};

// L·∫•y ca ti·∫øp theo
export const getNextShift = async (req, res) => {
  try {
    const { shiftId } = req.params;
    console.log('üîç [getNextShift] Starting with shiftId:', shiftId);

    const currentShift = await WorkShift.findByPk(shiftId);
    if (!currentShift) {
      console.log('‚ùå [getNextShift] Current shift not found:', shiftId);
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác hi·ªán t·∫°i' });
    }

    // L·∫•y t·∫•t c·∫£ ca thu·ªôc group hi·ªán t·∫°i t·ª´ shiftConfig
    const groupShifts = Object.entries(shiftConfig)
      .filter(([code, cfg]) => cfg.group === currentShift.group)
      .sort((a, b) => a[1].index - b[1].index);
    const currentIdx = groupShifts.findIndex(([code]) => code === currentShift.code);
    let nextIndex = currentIdx + 1;
    let nextDate = currentShift.date;
    // N·∫øu l√† ca cu·ªëi c√πng c·ªßa nh√≥m, chuy·ªÉn sang ng√†y m·ªõi v√† l·∫•y ca ƒë·∫ßu nh√≥m
    if (nextIndex >= groupShifts.length) {
      nextIndex = 0;
      const d = new Date(currentShift.date);
      d.setDate(d.getDate() + 1);
      nextDate = d.toISOString().split('T')[0];
    }
    const [nextShiftCode, nextCfg] = groupShifts[nextIndex];
    const nextShift = {
      code: nextShiftCode,
      date: nextDate,
      group: nextCfg.group,
      index: nextCfg.index
    };
    console.log('‚úÖ [getNextShift] Next shift info:', nextShift);
    return res.json({ nextShift });
  } catch (error) {
    console.error('‚ùå [getNextShift] Error:', error);
    console.error('‚ùå [getNextShift] Error stack:', error.stack);
    return res.status(500).json({ message: 'L·ªói server khi l·∫•y th√¥ng tin ca ti·∫øp theo' });
  }
};

export const receiveShift = async (req, res) => {
  try {
    const { id: shiftId, formId } = req.params;
    const userId = req.user.id;

    console.log('üîÑ Receiving shift:', { shiftId, formId, userId });

    // Ki·ªÉm tra form ƒë√£ t·ªìn t·∫°i ch∆∞a
    const form = await ShiftCheckForm.findOne({
      where: { id: formId },
      include: [{
        model: WorkShift,
        as: 'workShift',
        include: [{
          model: User,
          as: 'Users',
          through: { attributes: [] },
          attributes: ['id', 'username', 'fullname']
        }]
      }]
    });

    if (!form) {
      console.log('‚ùå Form not found:', formId);
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y bi√™n b·∫£n'
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i form
    if (form.status !== 'handover') {
      console.log('‚ùå Form is not in handover status:', form.status);
      return res.status(400).json({
        success: false,
        message: 'Bi√™n b·∫£n ch∆∞a ƒë∆∞·ª£c b√†n giao'
      });
    }

    // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ thu·ªôc ca ti·∫øp theo kh√¥ng s·ª≠ d·ª•ng shiftConfig
    const currentShiftConfig = shiftConfig[form.workShift.code];
    if (!currentShiftConfig) {
      console.log('‚ùå Invalid shift code:', form.workShift.code);
      return res.status(400).json({
        success: false,
        message: 'M√£ ca kh√¥ng h·ª£p l·ªá'
      });
    }

    // T√¨m ca ti·∫øp theo trong c√πng nh√≥m
    const groupShifts = Object.entries(shiftConfig)
      .filter(([code, cfg]) => cfg.group === currentShiftConfig.group)
      .sort((a, b) => a[1].index - b[1].index);

    const currentIdx = groupShifts.findIndex(([code]) => code === form.workShift.code);
    let nextIndex = currentIdx + 1;

    // N·∫øu l√† ca cu·ªëi c√πng trong nh√≥m, quay v·ªÅ ca ƒë·∫ßu ti√™n
    if (nextIndex >= groupShifts.length) {
      nextIndex = 0;
    }

    const nextShiftCode = groupShifts[nextIndex][0];

    const nextShift = await WorkShift.findOne({
      where: {
        code: nextShiftCode,
        date: form.workShift.date,
        status: 'waiting'
      },
      include: [{
        model: User,
        as: 'Users',
        through: { attributes: [] },
        attributes: ['id', 'username', 'fullname']
      }]
    });

    if (!nextShift) {
      console.log('‚ùå Next shift not found');
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ca ti·∫øp theo'
      });
    }

    const isUserInNextShift = nextShift.Users.some(user => user.id === userId);
    if (!isUserInNextShift) {
      console.log('‚ùå User not in next shift:', userId);
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng thu·ªôc ca ti·∫øp theo'
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i form th√†nh completed
    await form.update({ status: 'completed' });

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ca hi·ªán t·∫°i th√†nh done
    await form.workShift.update({ status: 'done' });

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ca ti·∫øp theo th√†nh doing
    await nextShift.update({ status: 'doing' });

    console.log('‚úÖ Successfully received shift');
    res.json({
      success: true,
      message: 'Nh·∫≠n ca th√†nh c√¥ng',
      data: {
        form,
        nextShift
      }
    });
  } catch (error) {
    console.error('‚ùå Error in receiveShift:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi nh·∫≠n ca',
      error: error.message
    });
  }
};

// L·∫•y th√¥ng tin chi ti·∫øt form b√†n giao
export const getHandoverDetails = async (req, res) => {
  try {
    const { handoverId } = req.params;

    // L·∫•y th√¥ng tin handover
    const handover = await ShiftHandover.findByPk(handoverId, {
      include: [
        {
          model: WorkShift,
          as: 'FromShift',
          attributes: ['id', 'code', 'name', 'date', 'status']
        },
        {
          model: WorkShift,
          as: 'ToShift',
          attributes: ['id', 'code', 'name', 'date', 'status']
        },
        {
          model: User,
          as: 'FromUser',
          attributes: ['id', 'username', 'fullname', 'role']
        },
        {
          model: User,
          as: 'ToUser',
          attributes: ['id', 'username', 'fullname', 'role']
        },
        {
          model: ShiftHandoverDevice,
          as: 'devices',
          attributes: [
            'id', 'deviceId', 'subDeviceName', 'serialNumber',
            'errorCode', 'errorCause', 'solution', 'status', 'resolveStatus',
            'deviceNameSnapshot', 'deviceCategorySnapshot',
            'devicePositionSnapshot', 'deviceSerialNumberSnapshot'
          ]
        },
        {
          model: ShiftHandoverTask,
          as: 'Tasks',
          attributes: [
            'id', 'location', 'taskId', 'fullName', 'taskTitle', 'taskDescription',
            'status', 'attachments', 'checkInTime', 'checkOutTime',
            'signature', 'completedAt', 'cancelReason', 'userId',
            'createdBy', 'completedBy', 'workSessionId', 'workShiftId',
            'index'
          ],
          include: [
            {
              model: User,
              as: 'user',
              attributes: ['id', 'username', 'fullname']
            },
            {
              model: User,
              as: 'creator',
              attributes: ['id', 'username', 'fullname']
            },
            {
              model: User,
              as: 'completer',
              attributes: ['id', 'username', 'fullname']
            }
          ]
        }
      ]
    });

    if (!handover) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n b√†n giao' });
    }

    // L·∫•y th√¥ng tin ShiftHandoverUser
    const handoverUsers = await ShiftHandoverUser.findAll({
      where: {
        shiftHandoverId: handoverId
      },
      include: [{
        model: User,
        as: 'User',  // Th√™m alias 'User' cho quan h·ªá
        attributes: ['id', 'username', 'fullname', 'role']
      }]
    });

    let fromUsers = [];
    let toUsers = [];

    if (['draft', 'pending'].includes(handover.status)) {
      // V·ªõi bi√™n b·∫£n draft ho·∫∑c pending, l·∫•y t·ª´ WorkSession
      const workSessions = await WorkSession.findAll({
        where: {
          workShiftId: handover.fromShiftId,
          status: 'active'
        },
        include: [{
          model: User,
          as: 'User',
          attributes: ['id', 'username', 'fullname', 'role']
        }]
      });

      fromUsers = workSessions.map(session => ({
        ...session.User.toJSON(),
        ShiftHandoverUser: {
          role: handoverUsers.find(hu =>
            hu.userId === session.User.id && hu.type === 'from'
          )?.role || 'handover'
        }
      }));
    } else {
      // V·ªõi bi√™n b·∫£n completed ho·∫∑c rejected, l·∫•y t·ª´ ShiftHandoverUsers
      fromUsers = handoverUsers
        .filter(hu => hu.type === 'from')
        .map(hu => ({
          ...hu.User.toJSON(),
          ShiftHandoverUser: {
            role: hu.role || 'handover'
          }
        }));
    }

    // L·∫•y danh s√°ch ng∆∞·ªùi nh·∫≠n t·ª´ WorkSession n·∫øu ƒëang draft/pending
    if (['draft', 'pending'].includes(handover.status)) {
      const toWorkSessions = await WorkSession.findAll({
        where: {
          workShiftId: handover.toShiftId,
          status: 'active'
        },
        include: [{
          model: User,
          as: 'User',
          attributes: ['id', 'username', 'fullname', 'role']
        }]
      });

      toUsers = toWorkSessions.map(session => ({
        ...session.User.toJSON(),
        ShiftHandoverUser: {
          role: handoverUsers.find(hu =>
            hu.userId === session.User.id && hu.type === 'to'
          )?.role || 'handover'
        }
      }));
    } else {
      // V·ªõi bi√™n b·∫£n completed/rejected, l·∫•y t·ª´ ShiftHandoverUsers
      toUsers = handoverUsers
        .filter(hu => hu.type === 'to')
        .map(hu => ({
          ...hu.User.toJSON(),
          ShiftHandoverUser: {
            role: hu.role || 'handover'
          }
        }));
    }

    // Format k·∫øt qu·∫£
    const result = {
      ...handover.toJSON(),
      FromUsers: fromUsers,
      ToUsers: toUsers
    };

    console.log('üìù Handover details:', {
      id: result.id,
      fromShift: result.FromShift.code,
      toShift: result.ToShift.code,
      fromUsers: fromUsers.length,
      toUsers: toUsers.length,
      status: result.status,
      tasks: result.Tasks.length
    });

    res.json(result);
  } catch (error) {
    console.error('Error getting handover details:', error);
    res.status(500).json({ message: 'L·ªói khi l·∫•y th√¥ng tin b·∫£n b√†n giao' });
  }
};



export const confirmHandover = async (req, res) => {
  try {
    const handoverId = req.params.handoverId;
    const { notes } = req.body;
    const currentUser = req.user;

    console.log('üîÑ Confirming handover:', { handoverId, userId: currentUser.id });

    // T√¨m b·∫£n b√†n giao v√† li√™n k·∫øt
    const handover = await db.ShiftHandover.findOne({
      where: {
        id: handoverId,
        status: 'pending'
      },
      include: [
        {
          model: db.WorkShift,
          as: 'ToShift',
          include: [{
            model: db.User,
            as: 'Users',
            attributes: ['id']
          }]
        },
        {
          model: db.WorkShift,
          as: 'FromShift'
        }
      ]
    });

    if (!handover) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n b√†n giao ho·∫∑c kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n' });
    }

    const toShift = handover.ToShift;

    // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ thu·ªôc ca nh·∫≠n kh√¥ng
    const isUserInToShift = toShift?.Users?.some(user => user.id === currentUser.id);
    if (!isUserInToShift) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng thu·ªôc ca nh·∫≠n' });
    }

    // ‚úÖ B·∫Øt ƒë·∫ßu transaction
    await db.sequelize.transaction(async (t) => {
      // 1. L·∫•y danh s√°ch ng∆∞·ªùi l√†m vi·ªác t·ª´ WorkSession
      const workedSessions = await db.WorkSession.findAll({
        where: {
          workShiftId: handover.fromShiftId,
          status: 'active'
        },
        include: [{
          model: db.User,
          as: 'User',  // Th√™m alias 'User'
          attributes: ['id', 'username', 'fullname', 'role']
        }],
        transaction: t
      });

      const workedUsers = workedSessions.map(session => ({
        id: session.User.id,
        username: session.User.username,
        fullname: session.User.fullname,
        role: session.User.role
      }));

      console.log('üë• Worked users to be saved:', workedUsers);

      // 2. Th√™m ng∆∞·ªùi l√†m vi·ªác v√†o ShiftHandoverUser tr∆∞·ªõc
      await Promise.all(workedUsers.map(user =>
        db.ShiftHandoverUser.findOrCreate({
          where: {
            shiftHandoverId: handover.id,
            userId: user.id,
            type: 'from'
          },
          defaults: {
            role: 'handover'
          },
          transaction: t
        })
      ));

      // 3. Th√™m ng∆∞·ªùi x√°c nh·∫≠n v√†o ShiftHandoverUser
      await db.ShiftHandoverUser.update(
        { role: 'confirmer' },  // C·∫≠p nh·∫≠t role th√†nh confirmer
        {
          where: {
            shiftHandoverId: handover.id,
            userId: currentUser.id,
            type: 'to'
          },
          transaction: t
        }
      );

      // 4. Th√™m c√°c user c√≤n l·∫°i trong ca nh·∫≠n v·ªõi role l√† receiver
      const otherUsers = toShift.Users
        .filter(user => user.id !== currentUser.id)
        .map(user => user.id);

      if (otherUsers.length > 0) {
        const existing = await db.ShiftHandoverUser.findAll({
          where: {
            shiftHandoverId: handover.id,
            userId: otherUsers,
            type: 'to'
          },
          transaction: t
        });

        const existingIds = existing.map(e => e.userId);
        const toAdd = otherUsers.filter(id => !existingIds.includes(id));

        if (toAdd.length > 0) {
          await Promise.all(toAdd.map(uid =>
            db.ShiftHandoverUser.create({
              shiftHandoverId: handover.id,
              userId: uid,
              role: 'receiver',  // C√°c user kh√°c s·∫Ω l√† receiver
              type: 'to'
            }, { transaction: t })
          ));
        }
      }

      // 5. C·∫≠p nh·∫≠t workedUsers v√†o FromShift
      await handover.FromShift.update({
        status: 'done',
        workedUsers: workedUsers
      }, { transaction: t });

      // 6. C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n giao
      await handover.update({
        toUserId: currentUser.id,
        status: 'completed',
        confirmedAt: new Date(),
        notes: notes || ''
      }, { transaction: t });

      // 7. C·∫≠p nh·∫≠t th·ªùi gian ca ca nh·∫≠n
      await toShift.update({
        confirmedAt: new Date()
      }, { transaction: t });

      // 8. C·∫≠p nh·∫≠t c√°c form li√™n quan kh√°c
      await db.ShiftHandover.update(
        { status: 'completed' },
        {
          where: {
            status: 'pending',
            toShiftId: handover.fromShiftId
          },
          transaction: t
        }
      );

      // 9. C·∫≠p nh·∫≠t tr·∫°ng th√°i WorkSession c·ªßa ca b√†n giao th√†nh 'done' thay v√¨ x√≥a
      await db.WorkSession.update(
        { status: 'completed' },
        {
          where: { workShiftId: handover.fromShiftId, status: 'active' },
          transaction: t
        }
      );
    });

    // ‚úÖ L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß ƒë·ªÉ tr·∫£ v·ªÅ
    const fullHandover = await db.ShiftHandover.findByPk(handoverId, {
      include: [
        {
          model: db.WorkShift,
          as: 'FromShift',
          attributes: ['id', 'code', 'date', 'status']
        },
        {
          model: db.WorkShift,
          as: 'ToShift',
          attributes: ['id', 'code', 'date', 'status']
        },
        {
          model: db.User,
          as: 'FromUsers',
          through: { attributes: ['role'] },
          attributes: ['id', 'username', 'fullname', 'role']
        },
        {
          model: db.User,
          as: 'ToUsers',
          through: { attributes: ['role'] },
          attributes: ['id', 'username', 'fullname', 'role']
        }
      ]
    });


    // Broadcast update
    sendShiftUpdate(fullHandover.FromShift, 'handover', 'doing', 'handover', req.user.id, req.user.fullname);

    res.json({
      message: 'X√°c nh·∫≠n b√†n giao th√†nh c√¥ng',
      handover: fullHandover
    });
  } catch (error) {
    console.error('‚ùå Error in confirmHandover:', error);
    res.status(500).json({
      message: 'L·ªói khi x√°c nh·∫≠n b√†n giao',
      error: error.message
    });
  }
};


// T·ª´ ch·ªëi b√†n giao ca
export const rejectHandover = async (req, res) => {
  try {
    const { handoverId } = req.params;
    const { notes } = req.body;
    const userId = req.user.id;

    console.log('‚ùå Rejecting handover:', { handoverId, userId });

    // T√¨m form b√†n giao
    const handover = await ShiftHandover.findByPk(handoverId, {
      include: [{
        model: WorkShift,
        as: 'FromShift',
        attributes: ['id', 'code', 'name', 'date', 'status']
      }, {
        model: WorkShift,
        as: 'ToShift',
        attributes: ['id', 'code', 'name', 'date', 'status']
      }]
    });

    if (!handover) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y form b√†n giao' });
    }

    // Ki·ªÉm tra quy·ªÅn t·ª´ ch·ªëi
    if (handover.status !== 'pending') {
      return res.status(400).json({ message: 'Ch·ªâ c√≥ th·ªÉ t·ª´ ch·ªëi form b√†n giao ·ªü tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n' });
    }

    // Ki·ªÉm tra ng∆∞·ªùi t·ª´ ch·ªëi c√≥ thu·ªôc ca ti·∫øp theo kh√¥ng
    const nextWorkSession = await WorkSession.findOne({
      where: {
        workShiftId: handover.toShiftId,
        userId: userId,
        status: 'active'
      }
    });

    if (!nextWorkSession) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng thu·ªôc ca ti·∫øp theo n√™n kh√¥ng th·ªÉ t·ª´ ch·ªëi b√†n giao' });
    }

    // C·∫≠p nh·∫≠t form b√†n giao
    handover.toUserId = userId;
    handover.status = 'draft';
    handover.FromShift.status = 'doing'
    handover.rejectNote = notes;
    handover.rejectedAt = new Date();
    await Promise.all([
      handover.save(),
      handover.FromShift.save()
    ]);

    console.log('‚úÖ Updated handover:', handover.toJSON());

    // Broadcast update
    sendShiftUpdate(handover.FromShift, 'handover', 'doing', 'handover', req.user.id, req.user.fullname);

    return res.json({
      message: 'T·ª´ ch·ªëi b√†n giao th√†nh c√¥ng',
      handover
    });
  } catch (error) {
    console.error('‚ùå Error in rejectHandover:', error);
    return res.status(500).json({ message: 'L·ªói server khi t·ª´ ch·ªëi b√†n giao' });
  }
};

// L·∫•y danh s√°ch form b√†n giao theo tr·∫°ng th√°i
export const getHandoversByStatus = async (req, res) => {
  try {
    const { status } = req.params;
    const { page = 1, limit = 15, dateRange, toShiftId } = req.query;
    const offset = (page - 1) * limit;

    // Build where condition
    const whereCondition = status === 'all' ? {} : { status };

    // Add date range filter if provided
    if (dateRange) {
      const [startDate, endDate] = dateRange.split(',');
      whereCondition.date = {
        [Op.between]: [startDate, endDate]
      };
    }

    // Add toShiftId filter if provided
    if (toShiftId) {
      whereCondition.toShiftId = toShiftId;
    }

    // Get total count
    const total = await ShiftHandover.count({ where: whereCondition });

    // Get paginated handovers
    const handovers = await ShiftHandover.findAll({
      where: whereCondition,
      attributes: ['id', 'status', 'date', 'fromShiftId', 'toShiftId'],
      include: [
        {
          model: WorkShift,
          as: 'FromShift',
          attributes: ['id', 'code', 'name', 'date', 'status']
        },
        {
          model: WorkShift,
          as: 'ToShift',
          attributes: ['id', 'code', 'name', 'date', 'status']
        },
        {
          model: User,
          as: 'FromUsers',
          through: { attributes: ['role'] },
          attributes: ['id', 'username', 'fullname', 'role']
        },
        {
          model: User,
          as: 'ToUsers',
          through: { attributes: ['role'] },
          attributes: ['id', 'username', 'fullname', 'role']
        }
      ],
      order: [['date', 'DESC']],
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    // Format l·∫°i workedUsers v√† FromUsers
    const formattedHandovers = await Promise.all(handovers.map(async handover => {
      const handoverData = handover.toJSON();

      // Format l·∫°i FromUsers cho c√°c tr·∫°ng th√°i ch∆∞a completed
      if (handoverData.status !== 'completed' && handoverData.fromShiftId) {
        const workSessions = await WorkSession.findAll({
          where: {
            workShiftId: handoverData.fromShiftId,
            status: 'active'
          },
          include: [{
            model: User,
            as: 'User',
            attributes: ['id', 'username', 'fullname', 'role']
          }]
        });
        handoverData.FromUsers = workSessions.map(session => ({
          ...session.User.toJSON(),
          ShiftHandoverUser: {
            role: handoverData.FromUsers.find(u => u.id === session.User.id)?.ShiftHandoverUser?.role || 'handover'
          }
        }));
      }

      // Gi·ªØ nguy√™n ToUsers nh∆∞ c≈©
      handoverData.ToUsers = handoverData.ToUsers.map(user => ({
        ...user,
        ShiftHandoverUser: {
          role: user.ShiftHandoverUser?.role || 'handover'
        }
      }));

      return handoverData;
    }));

    res.json({
      handovers: formattedHandovers,
      total,
      page: parseInt(page),
      limit: parseInt(limit),
      totalPages: Math.ceil(total / limit)
    });
  } catch (error) {
    console.error('‚ùå Error getting handovers:', error);
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch b√†n giao' });
  }
};

// L·∫•y l·ªãch s·ª≠ b√†n giao c·ªßa ng∆∞·ªùi d√πng
export const getHandoverHistory = async (req, res) => {
  try {
    const currentUser = req.user;

    // L·∫•y l·ªãch s·ª≠ b√†n giao c·ªßa ng∆∞·ªùi d√πng
    const handovers = await ShiftHandover.findAll({
      where: {
        [Op.or]: [
          { fromUserId: currentUser.id },
          { toUserId: currentUser.id }
        ]
      },
      include: [
        {
          model: WorkShift,
          as: 'FromShift',
          attributes: ['id', 'code', 'name', 'date', 'status']
        },
        {
          model: WorkShift,
          as: 'ToShift',
          attributes: ['id', 'code', 'name', 'date', 'status']
        },
        {
          model: User,
          as: 'FromUser',
          attributes: ['id', 'username', 'fullname', 'role']
        },
        {
          model: User,
          as: 'ToUser',
          attributes: ['id', 'username', 'fullname', 'role']
        }
      ],
      order: [['createdAt', 'DESC']]
    });

    res.json(handovers);
  } catch (error) {
    console.error('Error getting handover history:', error);
    res.status(500).json({ message: 'L·ªói khi l·∫•y l·ªãch s·ª≠ b√†n giao' });
  }
};



// Th·ªëng k√™ b√†n giao
export const getHandoverStats = async (req, res) => {
  try {
    const { startDate, endDate } = req.query;

    // X√¢y d·ª±ng ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
    const where = {};
    if (startDate && endDate) {
      where.createdAt = {
        [Op.between]: [
          new Date(startDate + 'T00:00:00.000Z'),
          new Date(endDate + 'T23:59:59.999Z')
        ]
      };
    }

    // L·∫•y th·ªëng k√™ theo tr·∫°ng th√°i
    const stats = await ShiftHandover.findAll({
      where,
      attributes: [
        'status',
        [sequelize.fn('COUNT', sequelize.col('id')), 'count']
      ],
      group: ['status']
    });

    // Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ th√†nh object
    const result = stats.reduce((acc, stat) => {
      acc[stat.status] = parseInt(stat.getDataValue('count'));
      return acc;
    }, {
      draft: 0,
      pending: 0,
      confirmed: 0,
      rejected: 0
    });

    // Th√™m t·ªïng s·ªë
    result.total = Object.values(result).reduce((sum, count) => sum + count, 0);

    res.json(result);
  } catch (error) {
    console.error('Error getting handover stats:', error);
    res.status(500).json({ message: 'L·ªói khi l·∫•y th·ªëng k√™ b√†n giao' });
  }
};

// L·∫•y form b√†n giao theo ca
export const getHandoversByShift = async (req, res) => {
  try {
    const { shiftId } = req.params;
    const handovers = await ShiftHandover.findAll({
      where: {
        [Op.or]: [
          { fromShiftId: shiftId },
          { toShiftId: shiftId }
        ]
      },
      include: [
        {
          model: WorkShift,
          as: 'FromShift',
          attributes: ['id', 'code', 'name', 'date', 'status']
        },
        {
          model: WorkShift,
          as: 'ToShift',
          attributes: ['id', 'code', 'name', 'date', 'status']
        },
        {
          model: User,
          as: 'FromUser',
          attributes: ['id', 'username', 'fullname', 'role']
        },
        {
          model: User,
          as: 'ToUser',
          attributes: ['id', 'username', 'fullname', 'role']
        }
      ],
      order: [['createdAt', 'DESC']]
    });

    res.json(handovers);
  } catch (error) {
    console.error('Error getting handovers by shift:', error);
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch bi√™n b·∫£n b√†n giao' });
  }
};

// L·∫•y form b√†n giao theo ng√†y
export const getHandoversByDate = async (req, res) => {
  try {
    const { date } = req.query;

    if (!date) {
      return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p ng√†y' });
    }

    // L·∫•y danh s√°ch b√†n giao theo ng√†y
    const handovers = await ShiftHandover.findAll({
      include: [
        {
          model: WorkShift,
          as: 'FromShift',
          where: { date },
          attributes: ['id', 'code', 'name', 'date', 'status']
        },
        {
          model: WorkShift,
          as: 'ToShift',
          attributes: ['id', 'code', 'name', 'date', 'status']
        },
        {
          model: User,
          as: 'FromUser',
          attributes: ['id', 'username', 'fullname', 'role']
        },
        {
          model: User,
          as: 'ToUser',
          attributes: ['id', 'username', 'fullname', 'role']
        },
        {
          model: User,
          as: 'FromUsers',
          through: { attributes: ['role'] },
          attributes: ['id', 'username', 'fullname']
        },
        {
          model: User,
          as: 'ToUsers',
          through: { attributes: ['role'] },
          attributes: ['id', 'username', 'fullname']
        }
      ],
      order: [['createdAt', 'DESC']]
    });

    res.json(handovers);
  } catch (error) {
    console.error('Error getting handovers by date:', error);
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch b√†n giao' });
  }
};

// L·∫•y danh s√°ch phi√™n l√†m vi·ªác
export const getWorkSessions = async (req, res) => {
  try {
    const { status, date } = req.query;
    console.log('üîç Getting work sessions:', { status, date });

    const where = {};
    if (status) where.status = status;
    if (date) where.date = date;

    console.log('üìù Query conditions:', where);

    const workSessions = await WorkSession.findAll({
      where,
      include: [
        {
          model: User,
          as: 'User',
          attributes: ['id', 'username', 'fullname']
        },
        {
          model: WorkShift,
          as: 'WorkShift',
          attributes: ['id', 'code', 'name', 'date', 'status']
        }
      ],
      order: [['createdAt', 'DESC']]
    });

    console.log('‚úÖ Retrieved work sessions:', {
      count: workSessions.length,
      sessions: workSessions.map(ws => ({
        id: ws.id,
        status: ws.status,
        user: ws.User?.username,
        shift: ws.WorkShift?.code
      }))
    });

    return res.json(workSessions);
  } catch (error) {
    console.error('‚ùå Error in getWorkSessions:', error);
    console.error('‚ùå Error stack:', error.stack);
    return res.status(500).json({
      message: 'L·ªói server khi l·∫•y danh s√°ch phi√™n l√†m vi·ªác',
      error: error.message
    });
  }
};

// üëâ H√†m t√¨m ho·∫∑c t·∫°o ca k·∫ø ti·∫øp d·ª±a tr√™n group + index + ng√†y
const findNextShift = async (currentShift) => {
  // L·∫•y t·∫•t c·∫£ ca thu·ªôc group hi·ªán t·∫°i t·ª´ shiftConfig
  const groupShifts = Object.entries(shiftConfig)
    .filter(([code, cfg]) => cfg.group === currentShift.group)
    .sort((a, b) => a[1].index - b[1].index);
  const currentIdx = groupShifts.findIndex(([code]) => code === currentShift.code);
  let nextIndex = currentIdx + 1;
  let nextDate = currentShift.date;
  // N·∫øu l√† ca cu·ªëi c√πng c·ªßa nh√≥m, chuy·ªÉn sang ng√†y m·ªõi v√† l·∫•y ca ƒë·∫ßu nh√≥m
  if (nextIndex >= groupShifts.length) {
    nextIndex = 0;
    const d = new Date(currentShift.date);
    d.setDate(d.getDate() + 1);
    nextDate = d.toISOString().split('T')[0];
  }
  const [nextShiftCode, nextCfg] = groupShifts[nextIndex];
  // T√¨m ca k·∫ø ti·∫øp
  let nextShift = await WorkShift.findOne({
    where: {
      code: nextShiftCode,
      date: nextDate
    }
  });
  // N·∫øu kh√¥ng t√¨m th·∫•y, t·∫°o ca m·ªõi
  if (!nextShift) {
    const config = shiftConfig[nextShiftCode];
    if (!config) {
      throw new Error('M√£ ca kh√¥ng h·ª£p l·ªá');
    }
    // L·∫•y userId t·ª´ shift hi·ªán t·∫°i (ng∆∞·ªùi t·∫°o ca ti·∫øp theo l√† ng∆∞·ªùi t·∫°o ca hi·ªán t·∫°i)
    const createdBy = currentShift.createdBy || 1;
    nextShift = await WorkShift.create({
      code: nextShiftCode,
      name: config.name,
      date: nextDate,
      startTime: config.startTime,
      endTime: config.endTime,
      status: 'waiting',
      group: config.group,
      index: config.index,
      createdBy
    });
    console.log('‚úÖ Created new shift:', nextShift.toJSON());
  }
  return nextShift;
};

// ‚úÖ [POST] T·∫°o b·∫£n nh√°p b√†n giao ca
export const createDraftHandover = async (req, res) => {
  try {
    const { shiftId, content, handoverUserId, devices } = req.body;
    const userId = req.user.id;

    console.log('üìù B·∫Øt ƒë·∫ßu t·∫°o b·∫£n nh√°p b√†n giao:', {
      shiftId,
      userId,
      handoverUserId,
      contentLength: content?.length,
      devicesCount: devices?.length
    });

    // B·∫Øt ƒë·∫ßu transaction
    const transaction = await db.sequelize.transaction();
    console.log('üîÑ ƒê√£ b·∫Øt ƒë·∫ßu transaction');

    try {
      // 1. Ki·ªÉm tra ca hi·ªán t·∫°i v√† l·∫•y danh s√°ch ng∆∞·ªùi trong ca
      console.log('üîç ƒêang ki·ªÉm tra th√¥ng tin ca:', shiftId);
      const shift = await WorkShift.findByPk(shiftId, {
        include: [{
          model: User,
          as: 'Users',
          through: { attributes: [] },
          attributes: ['id', 'username', 'fullname']
        }],
        transaction
      });

      if (!shift) {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y ca:', shiftId);
        await transaction.rollback();
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác' });
      }
      console.log('‚úÖ ƒê√£ t√¨m th·∫•y ca:', shift.code);

      // Ki·ªÉm tra xem ca ƒë√£ c√≥ bi√™n b·∫£n b√†n giao n√†o ch∆∞a
      console.log('üîç Ki·ªÉm tra bi√™n b·∫£n b√†n giao t·ªìn t·∫°i');
      const existingHandover = await ShiftHandover.findOne({
        where: {
          fromShiftId: shiftId,
          date: shift.date
        },
        transaction
      });

      if (existingHandover) {
        console.log('‚ùå ƒê√£ t·ªìn t·∫°i bi√™n b·∫£n:', existingHandover.id);
        await transaction.rollback();
        return res.status(400).json({
          message: 'Ca n√†y ƒë√£ c√≥ bi√™n b·∫£n b√†n giao',
          existingHandover: {
            id: existingHandover.id,
            status: existingHandover.status
          }
        });
      }

      // 2. Ki·ªÉm tra ng∆∞·ªùi d√πng thu·ªôc ca (ch·ªâ WorkSession)
      const activeWorkSession = await WorkSession.findOne({
        where: {
          userId: userId,
          workShiftId: shiftId,
          status: 'active'
        },
        transaction
      });
      if (!activeWorkSession) {
        await transaction.rollback();
        return res.status(403).json({ message: 'B·∫°n kh√¥ng thu·ªôc ca n√†y' });
      }
      console.log('‚úÖ Ng∆∞·ªùi d√πng c√≥ quy·ªÅn t·∫°o b·∫£n b√†n giao');

      // 3. T√¨m ca k·∫ø ti·∫øp
      console.log('üîç T√¨m ca k·∫ø ti·∫øp');
      const nextShift = await findNextShift(shift);
      if (!nextShift) {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y ca k·∫ø ti·∫øp');
        await transaction.rollback();
        return res.status(400).json({ message: 'Ch∆∞a c√≥ ca k·∫ø ti·∫øp ƒë·ªÉ b√†n giao' });
      }
      console.log('‚úÖ ƒê√£ t√¨m th·∫•y ca k·∫ø ti·∫øp:', nextShift.code);

      // 4. C·∫≠p nh·∫≠t workedUsers c·ªßa ca hi·ªán t·∫°i
      console.log('üìù C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi l√†m vi·ªác');
      const currentUsers = shift.Users.map(user => ({
        id: user.id,
        username: user.username,
        fullname: user.fullname
      }));

      await shift.update({
        workedUsers: currentUsers,
      }, { transaction });
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi l√†m vi·ªác:', currentUsers.length, 'ng∆∞·ªùi');

      // 5. Ki·ªÉm tra ng∆∞·ªùi ƒë·∫°i di·ªán b√†n giao
      const handoverRepId = handoverUserId || userId;
      console.log('üîç Ki·ªÉm tra ng∆∞·ªùi ƒë·∫°i di·ªán b√†n giao:', handoverRepId);
      if (!currentUsers.some(user => user.id === handoverRepId)) {
        console.log('‚ùå Ng∆∞·ªùi ƒë·∫°i di·ªán kh√¥ng h·ª£p l·ªá');
        await transaction.rollback();
        return res.status(400).json({
          message: 'Ng∆∞·ªùi ƒë·∫°i di·ªán b√†n giao kh√¥ng thu·ªôc ca hi·ªán t·∫°i'
        });
      }
      console.log('‚úÖ Ng∆∞·ªùi ƒë·∫°i di·ªán h·ª£p l·ªá');

      // 6. T·∫°o b·∫£n nh√°p b√†n giao
      console.log('üìù T·∫°o b·∫£n nh√°p b√†n giao');
      const draftHandover = await ShiftHandover.create({
        fromShiftId: shiftId,
        toShiftId: nextShift.id,
        fromUserId: handoverRepId,
        content,
        handoverForm: req.body.handoverForm,
        date: shift.date,
        status: 'draft'
      }, { transaction });
      console.log('‚úÖ ƒê√£ t·∫°o b·∫£n nh√°p:', draftHandover.id);

      // 7. Th√™m ng∆∞·ªùi ƒë·∫°i di·ªán b√†n giao v√†o ShiftHandoverUser
      console.log('üìù Th√™m ng∆∞·ªùi ƒë·∫°i di·ªán v√†o ShiftHandoverUser');
      await ShiftHandoverUser.create({
        shiftHandoverId: draftHandover.id,
        userId: handoverRepId,
        type: 'from',
        role: 'handover'
      }, { transaction });
      console.log('‚úÖ ƒê√£ th√™m ng∆∞·ªùi ƒë·∫°i di·ªán');

      // 8. Th√™m nh·ªØng ng∆∞·ªùi c√≤n l·∫°i trong ca
      console.log('üìù Th√™m nh·ªØng ng∆∞·ªùi c√≤n l·∫°i trong ca');
      const otherUsers = currentUsers
        .filter(user => user.id !== handoverRepId)
        .map(user => user.id);

      if (otherUsers.length > 0) {
        console.log('‚ûï Th√™m', otherUsers.length, 'ng∆∞·ªùi kh√°c');
        await Promise.all(otherUsers.map(userId =>
          ShiftHandoverUser.create({
            shiftHandoverId: draftHandover.id,
            userId: userId,
            type: 'from'
          }, { transaction })
        ));
      }

      // TH√äM ƒêO·∫†N CODE N√ÄY: L·∫•y danh s√°ch ng∆∞·ªùi trong ca ti·∫øp theo
      const nextShiftUsers = await WorkSession.findAll({
        where: {
          workShiftId: nextShift.id,
          status: 'active'
        },
        include: [{
          model: User,
          as: 'User',
          attributes: ['id', 'username', 'fullname']
        }]
      });

      // TH√äM ƒêO·∫†N CODE N√ÄY: Th√™m ng∆∞·ªùi nh·∫≠n t·ª´ ca ti·∫øp theo
      if (nextShiftUsers.length > 0) {
        await Promise.all(nextShiftUsers.map(session =>
          ShiftHandoverUser.create({
            shiftHandoverId: draftHandover.id,
            userId: session.User.id,
            type: 'to',
            role: 'receiver'
          }, { transaction })
        ));
      }

      // 9. L∆∞u danh s√°ch thi·∫øt b·ªã
      console.log('üìù B·∫Øt ƒë·∫ßu l∆∞u danh s√°ch thi·∫øt b·ªã:', devices?.length || 0, 'thi·∫øt b·ªã');
      if (devices && Array.isArray(devices)) {
        await Promise.all(devices.map(async (device, index) => {
          console.log(`‚ûï L∆∞u thi·∫øt b·ªã ${index + 1}:`, {
            deviceId: device.deviceId,
            status: device.status
          });
          await ShiftHandoverDevice.create({
            handoverId: draftHandover.id,
            deviceId: device.deviceId,
            status: device.status,
            subDeviceName: device.subDeviceName,
            serialNumber: device.serialNumber,
            errorCode: device.errorCode,
            errorCause: device.errorCause,
            solution: device.solution,
            resolveStatus: device.status === 'C√≥ l·ªói' ? (device.resolveStatus || 'Ch∆∞a x·ª≠ l√Ω') : '',
            index: index + 1
          }, { transaction });
        }));
      }
      console.log('‚úÖ ƒê√£ l∆∞u xong danh s√°ch thi·∫øt b·ªã');

      // 9.1 L∆∞u danh s√°ch c√¥ng vi·ªác
      console.log('üìù B·∫Øt ƒë·∫ßu l∆∞u danh s√°ch c√¥ng vi·ªác:', req.body.handoverForm?.tasks?.length || 0, 'c√¥ng vi·ªác');
      if (req.body.handoverForm?.tasks && Array.isArray(req.body.handoverForm.tasks)) {
        await Promise.all(req.body.handoverForm.tasks.map(async (task, index) => {
          console.log(`‚ûï L∆∞u c√¥ng vi·ªác ${index + 1}:`, {
            taskId: task.id,
            location: task.location
          });

          // L·∫•y danh s√°ch nh√¢n s·ª± t·ª´ TaskUsers
          let fullName = '';
          try {
            console.log(`üîç L·∫•y danh s√°ch nh√¢n s·ª± cho task ${task.id}`);

            const taskUsers = await TaskUsers.findAll({
              where: { taskId: task.id },
              include: [
                {
                  model: User,
                  as: 'user',
                  attributes: ['fullname', 'username']
                },
                {
                  model: Partners,
                  as: 'partner',
                  attributes: ['fullname']
                }
              ],
              transaction
            });

            console.log(`üìã TaskUsers cho task ${task.id}:`, taskUsers.length, 'records');
            console.log(`üìã Chi ti·∫øt TaskUsers:`, JSON.stringify(taskUsers, null, 2));

            // T·∫°o chu·ªói fullName t·ª´ danh s√°ch nh√¢n s·ª±
            const staffNames = taskUsers.map(tu => {
              console.log(`üë§ Processing TaskUser:`, {
                userId: tu.userId,
                partnerId: tu.partnerId,
                user: tu.user,
                partner: tu.partner
              });

              if (tu.user) {
                const name = tu.user.fullname || tu.user.username;
                console.log(`üë§ User name: ${name}`);
                return name;
              } else if (tu.partner) {
                const name = tu.partner.fullName;
                console.log(`üë§ Partner name: ${name}`);
                return name;
              }
              console.log(`‚ùå No user or partner found for TaskUser`);
              return null;
            }).filter(name => name);

            console.log(`üìã Staff names:`, staffNames);
            fullName = staffNames.join(', ');
            console.log(`üìã Final fullName: "${fullName}"`);

          } catch (error) {
            console.error(`‚ùå L·ªói khi l·∫•y danh s√°ch nh√¢n s·ª± cho task ${task.id}:`, error);
            // Fallback: s·ª≠ d·ª•ng task.fullName n·∫øu c√≥
            fullName = task.fullName || 'Kh√¥ng x√°c ƒë·ªãnh';
          }

          // N·∫øu v·∫´n kh√¥ng c√≥ fullName, t·∫°o m·ªôt gi√° tr·ªã m·∫∑c ƒë·ªãnh
          if (!fullName || fullName.trim() === '') {
            fullName = `C√¥ng vi·ªác ${task.id}`;
            console.log(`‚ö†Ô∏è S·ª≠ d·ª•ng fullName m·∫∑c ƒë·ªãnh: "${fullName}"`);
          }

          await ShiftHandoverTask.create({
            handoverId: draftHandover.id,
            taskId: task.id,
            location: task.location,
            fullName: fullName,
            taskTitle: task.taskTitle,
            taskDescription: task.taskDescription,
            status: task.status,
            checkInTime: task.checkInTime,
            checkOutTime: task.checkOutTime,
            signature: task.signature,
            completedAt: task.completedAt,
            cancelReason: task.cancelReason,
            userId: task.userId,
            createdBy: task.createdBy,
            completedBy: task.completedBy,
            workSessionId: task.workSessionId,
            workShiftId: task.workShiftId,
            index: index + 1
          }, { transaction });
        }));
      }
      console.log('‚úÖ ƒê√£ l∆∞u xong danh s√°ch c√¥ng vi·ªác');

      // 10. L∆∞u danh s√°ch l·ªói thi·∫øt b·ªã
      console.log('üìù B·∫Øt ƒë·∫ßu l∆∞u danh s√°ch l·ªói thi·∫øt b·ªã:', req.body.deviceErrors?.length || 0, 'l·ªói');
      if (req.body.deviceErrors && req.body.deviceErrors.length > 0) {
        let errorData = [];
        for (const error of req.body.deviceErrors) {
          if (error.id && error.resolveStatus === 'ƒê√£ x·ª≠ l√Ω') {
            // N·∫øu c√≥ id v√† ƒë√£ x·ª≠ l√Ω, update DeviceError sang ƒê√£ x·ª≠ l√Ω
            await DeviceError.update({
              resolveStatus: 'ƒê√£ x·ª≠ l√Ω',
              resolvedAt: error.resolvedAt || null,
              resolvedBy: error.resolvedBy || '',
              resolveNote: error.resolveNote || '',
              updatedAt: new Date()
            }, {
              where: { id: error.id },
              transaction
            });
            continue;
          }

          if (error.status === 'C√≥ l·ªói' && error.errorCode && error.errorCause) {
            if (error.id) {
              // N·∫øu c√≥ id, update l·ªói c≈©
              await DeviceError.update({
                subDeviceName: error.subDeviceName,
                serialNumber: error.serialNumber,
                errorCode: error.errorCode,
                errorCause: error.errorCause,
                solution: error.solution,
                resolveStatus: error.resolveStatus || 'Ch∆∞a x·ª≠ l√Ω',
                resolvedAt: error.resolvedAt || null,
                resolveNote: error.resolveNote || '',
                resolvedBy: error.resolvedBy || '',
                createdBy: userId,
                updatedAt: new Date()
              }, {
                where: { id: error.id },
                transaction
              });
            } else {
              // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ d·ª±a v√†o deviceId v√† subDeviceName
              const existed = await DeviceError.findOne({
                where: {
                  deviceId: error.deviceId,
                  subDeviceName: error.subDeviceName,
                  resolveStatus: 'Ch∆∞a x·ª≠ l√Ω'
                },
                transaction
              });

              if (existed) {
                // Update b·∫£n ghi c≈©
                await existed.update({
                  serialNumber: error.serialNumber,
                  errorCode: error.errorCode,
                  errorCause: error.errorCause,
                  solution: error.solution,
                  resolveStatus: error.resolveStatus || 'Ch∆∞a x·ª≠ l√Ω',
                  resolvedAt: error.resolvedAt || null,
                  resolveNote: error.resolveNote || '',
                  resolvedBy: error.resolvedBy || '',
                  createdBy: userId,
                  updatedAt: new Date()
                }, { transaction });
              } else {
                // T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
                errorData.push({
                  deviceId: error.deviceId,
                  subDeviceName: error.subDeviceName || '',
                  serialNumber: error.serialNumber || '',
                  errorCode: error.errorCode,
                  errorCause: error.errorCause,
                  solution: error.solution || '',
                  resolveStatus: error.resolveStatus || 'Ch∆∞a x·ª≠ l√Ω',
                  resolvedAt: error.resolvedAt || null,
                  resolveNote: error.resolveNote || '',
                  resolvedBy: error.resolvedBy || '',
                  createdBy: userId,
                  createdAt: new Date(),
                  updatedAt: new Date()
                });
              }
            }
          }
        }

        if (errorData.length > 0) {
          await DeviceError.bulkCreate(errorData, {
            transaction,
            returning: false
          });
        }
      }
      console.log('‚úÖ ƒê√£ l∆∞u xong danh s√°ch l·ªói thi·∫øt b·ªã');

      // Commit transaction
      await transaction.commit();
      console.log('‚úÖ ƒê√£ commit transaction');

      // 11. Tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
      console.log('üîç L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß c·ªßa b·∫£n nh√°p');
      const result = await ShiftHandover.findByPk(draftHandover.id, {
        include: [
          {
            model: WorkShift,
            as: 'FromShift',
            attributes: ['id', 'code', 'name']
          },
          {
            model: WorkShift,
            as: 'ToShift',
            attributes: ['id', 'code', 'name']
          },
          {
            model: User,
            as: 'FromUsers',
            through: {
              attributes: ['role']
            },
            attributes: ['id', 'username', 'fullname']
          },
          {
            model: ShiftHandoverDevice,
            as: 'devices'
          }
        ]
      });
      console.log('‚úÖ ƒê√£ l·∫•y xong th√¥ng tin ƒë·∫ßy ƒë·ªß');

      console.log('üéâ Ho√†n th√†nh t·∫°o b·∫£n nh√°p:', result.id);
      res.status(201).json({
        message: 'ƒê√£ t·∫°o b·∫£n nh√°p b√†n giao',
        handover: result
      });

    } catch (error) {
      console.error('‚ùå L·ªói trong transaction:', error);
      await transaction.rollback();
      console.log('‚Ü©Ô∏è ƒê√£ rollback transaction');
      throw error;
    }

  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o b·∫£n nh√°p:', error);
    console.error('Chi ti·∫øt l·ªói:', error.stack);
    res.status(500).json({
      message: 'L·ªói khi t·∫°o b·∫£n nh√°p b√†n giao',
      error: error.message
    });
  }
};

// C·∫≠p nh·∫≠t b·∫£n nh√°p
export const updateDraftHandover = async (req, res) => {
  try {
    const { handoverId } = req.params;
    const { content, devices, deviceErrors, handoverForm } = req.body;
    const currentUser = req.user;

    console.log('üìù C·∫≠p nh·∫≠t b·∫£n nh√°p:', {
      handoverId,
      contentLength: content?.length,
      devicesCount: devices?.length,
      deviceErrorsCount: deviceErrors?.length
    });

    // B·∫Øt ƒë·∫ßu transaction
    const transaction = await db.sequelize.transaction();
    console.log('üîÑ ƒê√£ b·∫Øt ƒë·∫ßu transaction');

    try {
      // T√¨m b·∫£n nh√°p
      const handover = await ShiftHandover.findOne({
        where: {
          id: handoverId,
          status: 'draft'
        },
        include: [
          {
            model: User,
            as: 'FromUsers',
            through: { attributes: [] },
            attributes: ['id']
          }
        ],
        transaction
      });

      if (!handover) {
        await transaction.rollback();
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n nh√°p b√†n giao' });
      }

      // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ thu·ªôc ca kh√¥ng (ch·ªâ WorkSession, KH√îNG ki·ªÉm tra ShiftHandoverUser)
      const activeWorkSession = await WorkSession.findOne({
        where: {
          userId: currentUser.id,
          workShiftId: handover.fromShiftId,
          status: 'active'
        }
      });
      if (!activeWorkSession) {
        await transaction.rollback();
        return res.status(403).json({ message: 'B·∫°n kh√¥ng thu·ªôc ca n√†y' });
      }

      // C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n
      await handover.update({
        content: content || handover.content,
        handoverForm: handoverForm || handover.handoverForm
      }, { transaction });

      // X√≥a danh s√°ch thi·∫øt b·ªã c≈©
      await ShiftHandoverDevice.destroy({
        where: { handoverId },
        transaction
      });

      // X√≥a danh s√°ch c√¥ng vi·ªác c≈©
      await ShiftHandoverTask.destroy({
        where: { handoverId },
        transaction
      });

      // Th√™m danh s√°ch thi·∫øt b·ªã m·ªõi
      console.log('üìù C·∫≠p nh·∫≠t danh s√°ch thi·∫øt b·ªã:', devices?.length || 0, 'thi·∫øt b·ªã');
      if (devices && Array.isArray(devices)) {
        await Promise.all(devices.map(async (device, index) => {
          console.log(`‚ûï L∆∞u thi·∫øt b·ªã ${index + 1}:`, {
            deviceId: device.deviceId,
            status: device.status
          });
          await ShiftHandoverDevice.create({
            handoverId,
            deviceId: device.deviceId,
            status: device.status,
            subDeviceName: device.subDeviceName,
            serialNumber: device.serialNumber,
            errorCode: device.errorCode,
            errorCause: device.errorCause,
            solution: device.solution,
            resolveStatus: device.status === 'C√≥ l·ªói' ? (device.resolveStatus || 'Ch∆∞a x·ª≠ l√Ω') : '',
            index: index + 1
          }, { transaction });
        }));
      }
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t xong danh s√°ch thi·∫øt b·ªã');

      // C·∫≠p nh·∫≠t danh s√°ch l·ªói thi·∫øt b·ªã
      console.log('üìù C·∫≠p nh·∫≠t danh s√°ch l·ªói thi·∫øt b·ªã:', deviceErrors?.length || 0, 'l·ªói');
      if (deviceErrors && deviceErrors.length > 0) {
        for (const error of deviceErrors) {
          if (error.id && error.resolveStatus === 'ƒê√£ x·ª≠ l√Ω') {
            // N·∫øu c√≥ id v√† ƒë√£ x·ª≠ l√Ω, update DeviceError sang ƒê√£ x·ª≠ l√Ω
            await DeviceError.update({
              resolveStatus: 'ƒê√£ x·ª≠ l√Ω',
              resolvedAt: error.resolvedAt || null,
              resolvedBy: error.resolvedBy || '',
              resolveNote: error.resolveNote || '',
              updatedAt: new Date()
            }, {
              where: { id: error.id },
              transaction
            });
            continue;
          }

          if (error.status === 'C√≥ l·ªói' && error.errorCode && error.errorCause) {
            if (error.id) {
              // N·∫øu c√≥ id, update l·ªói c≈©
              await DeviceError.update({
                subDeviceName: error.subDeviceName,
                serialNumber: error.serialNumber,
                errorCode: error.errorCode,
                errorCause: error.errorCause,
                solution: error.solution,
                resolveStatus: error.resolveStatus || 'Ch∆∞a x·ª≠ l√Ω',
                resolvedAt: error.resolvedAt || null,
                resolveNote: error.resolveNote || '',
                resolvedBy: error.resolvedBy || '',
                updatedAt: new Date()
              }, {
                where: { id: error.id },
                transaction
              });
            } else {
              // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ d·ª±a v√†o deviceId v√† subDeviceName
              const existed = await DeviceError.findOne({
                where: {
                  deviceId: error.deviceId,
                  subDeviceName: error.subDeviceName,
                  resolveStatus: 'Ch∆∞a x·ª≠ l√Ω'
                },
                transaction
              });

              if (existed) {
                // Update b·∫£n ghi c≈©
                await existed.update({
                  serialNumber: error.serialNumber,
                  errorCode: error.errorCode,
                  errorCause: error.errorCause,
                  solution: error.solution,
                  resolveStatus: error.resolveStatus || 'Ch∆∞a x·ª≠ l√Ω',
                  resolvedAt: error.resolvedAt || null,
                  resolveNote: error.resolveNote || '',
                  resolvedBy: error.resolvedBy || '',
                  updatedAt: new Date()
                }, { transaction });
              } else {
                // T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
                await DeviceError.create({
                  deviceId: error.deviceId,
                  subDeviceName: error.subDeviceName || '',
                  serialNumber: error.serialNumber || '',
                  errorCode: error.errorCode,
                  errorCause: error.errorCause,
                  solution: error.solution || '',
                  resolveStatus: error.resolveStatus || 'Ch∆∞a x·ª≠ l√Ω',
                  resolvedAt: error.resolvedAt || null,
                  resolveNote: error.resolveNote || '',
                  resolvedBy: error.resolvedBy || '',
                  createdAt: new Date(),
                  updatedAt: new Date()
                }, { transaction });
              }
            }
          }
        }
      }
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t xong danh s√°ch l·ªói thi·∫øt b·ªã');

      // C·∫≠p nh·∫≠t danh s√°ch c√¥ng vi·ªác
      console.log('üìù C·∫≠p nh·∫≠t danh s√°ch c√¥ng vi·ªác:', handoverForm?.tasks?.length || 0, 'c√¥ng vi·ªác');
      if (handoverForm?.tasks && Array.isArray(handoverForm.tasks)) {
        await Promise.all(handoverForm.tasks.map(async (task, index) => {
          console.log(`‚ûï L∆∞u c√¥ng vi·ªác ${index + 1}:`, {
            taskId: task.id,
            location: task.location
          });
          await ShiftHandoverTask.create({
            handoverId,
            taskId: task.id,
            location: task.location,
            fullName: task.fullName,
            taskTitle: task.taskTitle,
            taskDescription: task.taskDescription,
            status: task.status,
            checkInTime: task.checkInTime,
            checkOutTime: task.checkOutTime,
            signature: task.signature,
            completedAt: task.completedAt,
            cancelReason: task.cancelReason,
            userId: task.userId,
            createdBy: task.createdBy,
            completedBy: task.completedBy,
            workSessionId: task.workSessionId,
            workShiftId: task.workShiftId,
            index: index + 1
          }, { transaction });
        }));
      }
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t xong danh s√°ch c√¥ng vi·ªác');

      // Commit transaction
      await transaction.commit();
      console.log('‚úÖ ƒê√£ commit transaction');

      // L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß
      const fullHandover = await ShiftHandover.findByPk(handover.id, {
        include: [
          {
            model: WorkShift,
            as: 'FromShift',
            attributes: ['id', 'code', 'name', 'date', 'status']
          },
          {
            model: WorkShift,
            as: 'ToShift',
            attributes: ['id', 'code', 'name', 'date', 'status']
          },
          {
            model: User,
            as: 'FromUsers',
            through: { attributes: [] },
            attributes: ['id', 'username', 'fullname', 'role']
          },
          {
            model: ShiftHandoverDevice,
            as: 'devices'
          }
        ]
      });

      res.json({
        message: 'C·∫≠p nh·∫≠t b·∫£n nh√°p th√†nh c√¥ng',
        handover: fullHandover
      });

    } catch (error) {
      console.error('‚ùå L·ªói trong transaction:', error);
      await transaction.rollback();
      console.log('‚Ü©Ô∏è ƒê√£ rollback transaction');
      throw error;
    }
  } catch (error) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t b·∫£n nh√°p:', error);
    res.status(500).json({
      message: 'L·ªói khi c·∫≠p nh·∫≠t b·∫£n nh√°p',
      error: error.message
    });
  }
};

// X√≥a b·∫£n nh√°p
export const deleteDraftHandover = async (req, res) => {
  try {
    const { handoverId } = req.params;
    const currentUser = req.user;

    // T√¨m b·∫£n nh√°p
    const handover = await ShiftHandover.findOne({
      where: {
        id: handoverId,
        status: 'draft'
      }
    });

    if (!handover) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n nh√°p b√†n giao' });
    }

    // Ki·ªÉm tra quy·ªÅn x√≥a: ch·ªâ c·∫ßn user ƒëang active trong ca
    const activeWorkSession = await WorkSession.findOne({
      where: {
        userId: currentUser.id,
        workShiftId: handover.fromShiftId,
        status: 'active'
      }
    });
    if (!activeWorkSession) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng thu·ªôc ca n√†y' });
    }

    // X√≥a c√°c file ƒë√≠nh k√®m n·∫øu c√≥
    const attachments = handover.attachments || [];
    if (attachments.length > 0) {
      for (const file of attachments) {
        try {
          if (file.path && fs.existsSync(file.path)) {
            fs.unlinkSync(file.path);
          }
        } catch (err) {
          // B·ªè qua l·ªói x√≥a file
        }
      }
    }

    // X√≥a b·∫£n nh√°p
    await handover.destroy();
    res.json({ message: 'X√≥a b·∫£n nh√°p th√†nh c√¥ng' });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi x√≥a b·∫£n nh√°p' });
  }
};

// L·∫•y danh s√°ch b·∫£n nh√°p
export const getDraftHandovers = async (req, res) => {
  try {
    const userId = req.user.id;

    const drafts = await ShiftHandover.findAll({
      where: {
        userId,
        status: 'draft'
      },
      include: [
        {
          model: WorkShift,
          as: 'WorkShift',
          attributes: ['code', 'date', 'status']
        }
      ]
    });

    res.json(drafts);
  } catch (error) {
    console.error('Error getting draft handovers:', error);
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch b·∫£n nh√°p' });
  }
};

// L·∫•y chi ti·∫øt b·∫£n nh√°p
export const getDraftHandover = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;

    const handover = await ShiftHandover.findByPk(id, {
      include: [
        {
          model: WorkShift,
          as: 'WorkShift',
          attributes: ['code', 'date', 'status']
        }
      ]
    });

    if (!handover) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n nh√°p' });
    }

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    if (handover.userId !== userId) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem b·∫£n nh√°p n√†y' });
    }

    res.json(handover);
  } catch (error) {
    console.error('Error getting draft handover:', error);
    res.status(500).json({ message: 'L·ªói khi l·∫•y th√¥ng tin b·∫£n nh√°p' });
  }
};

// G·ª≠i b·∫£n nh√°p ƒë·ªÉ b√†n giao
export const submitDraftHandover = async (req, res) => {
  try {
    const { handoverId } = req.params;
    const currentUser = req.user;

    // T√¨m b·∫£n nh√°p
    const handover = await ShiftHandover.findOne({
      where: {
        id: handoverId,
        status: 'draft'
      },
      include: [
        {
          model: WorkShift,
          as: 'FromShift'
        },
        {
          model: User,
          as: 'FromUsers',
          through: { attributes: [] },
          attributes: ['id']
        }
      ]
    });

    if (!handover) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n nh√°p b√†n giao' });
    }

    // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ thu·ªôc ca kh√¥ng - ki·ªÉm tra c·∫£ WorkSession v√† ShiftHandoverUser
    const [workSession, handoverUser] = await Promise.all([
      WorkSession.findOne({
        where: {
          userId: currentUser.id,
          workShiftId: handover.fromShiftId,
          status: 'active'
        }
      }),
      ShiftHandoverUser.findOne({
        where: {
          shiftHandoverId: handoverId,
          userId: currentUser.id,
          type: 'from'
        }
      })
    ]);

    // Ng∆∞·ªùi d√πng ph·∫£i thu·ªôc ca (c√≥ WorkSession active) ho·∫∑c l√† ng∆∞·ªùi ƒë∆∞·ª£c th√™m v√†o b√†n giao
    if (!workSession && !handoverUser) {
      return res.status(403).json({
        message: 'B·∫°n kh√¥ng thu·ªôc ca n√†y ho·∫∑c kh√¥ng ƒë∆∞·ª£c th√™m v√†o danh s√°ch b√†n giao',
        details: {
          hasWorkSession: !!workSession,
          hasHandoverUser: !!handoverUser
        }
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    await handover.update({ status: 'pending' });

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ca hi·ªán t·∫°i
    await handover.FromShift.update({ status: 'handover' });

    sendShiftUpdate(handover.FromShift, 'handover', 'doing', 'handover', req.user.id, req.user.fullname);

    // L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß
    const fullHandover = await ShiftHandover.findByPk(handover.id, {
      include: [
        {
          model: WorkShift,
          as: 'FromShift',
          attributes: ['id', 'code', 'name', 'date', 'status']
        },
        {
          model: WorkShift,
          as: 'ToShift',
          attributes: ['id', 'code', 'name', 'date', 'status']
        },
        {
          model: User,
          as: 'FromUser',
          attributes: ['id', 'username', 'fullname', 'role']
        },
        {
          model: User,
          as: 'FromUsers',
          through: { attributes: ['role'] },
          attributes: ['id', 'username', 'fullname', 'role']
        }
      ]
    });


    res.json({
      message: 'G·ª≠i b·∫£n nh√°p b√†n giao th√†nh c√¥ng',
      handover: fullHandover
    });
  } catch (error) {
    console.error('Error submitting draft handover:', error);
    res.status(500).json({ message: 'L·ªói khi g·ª≠i b·∫£n b√†n giao' });
  }
};

export const getShiftUsers = async (req, res) => {
  try {
    const { id } = req.params;
    console.log('üîç Getting users for shift:', id);

    const shift = await WorkShift.findOne({
      where: { id },
      include: [{
        model: User,
        as: 'Users',
        through: { attributes: [] },
        attributes: ['id', 'username', 'fullname', 'role']
      }]
    });

    if (!shift) {
      console.log('‚ùå Shift not found:', id);
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác' });
    }

    console.log('‚úÖ Found users:', shift.Users.map(u => u.username));
    res.json({
      data: shift.Users,
      message: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng trong ca th√†nh c√¥ng'
    });
  } catch (err) {
    console.error('GET /shifts/:id/users error:', err);
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng trong ca' });
  }
};

// L·∫•y danh s√°ch ca l√†m vi·ªác c·ªßa user ƒëƒÉng nh·∫≠p
export const getMyShifts = async (req, res) => {
  try {
    const userId = req.user.id;
    const { status = 'active', startDate, endDate } = req.query;

    // T√¨m t·∫•t c·∫£ ca l√†m vi·ªác c·ªßa user
    const whereClause = {
      userId

    };

    if (status) {
      whereClause.status = status;
    }

    const sessions = await WorkSession.findAll({
      where: whereClause,
      attributes: ['id', 'status', 'date'],
      include: [
        {
          model: WorkShift,
          as: 'WorkShift',
          attributes: ['id', 'code', 'name', 'date', 'confirmedAt', 'status', 'group', 'index'],
          include: [
            {
              model: User,
              as: 'Users',
              through: { attributes: [] },
              attributes: ['id', 'username', 'fullname']
            }
          ]
        }
      ],
      order: [
        ['status', 'DESC'], // S·∫Øp x·∫øp active l√™n ƒë·∫ßu
        ['date', 'DESC'],
        ['startedAt', 'DESC']
      ]
    });

    res.json({
      success: true,
      data: sessions
    });
  } catch (error) {
    console.error('‚ùå Error in getMyShifts:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch ca l√†m vi·ªác',
      error: error.message
    });
  }
};

export default {
  // ... existing exports ...
  getMyShifts,
};

// Upload files for handover
export const uploadHandoverFiles = async (req, res) => {
  try {
    const { id } = req.params;
    const currentUser = req.user;

    // Ki·ªÉm tra files c√≥ t·ªìn t·∫°i kh√¥ng
    if (!req.files || !Array.isArray(req.files) || req.files.length === 0) {
      return res.status(400).json({
        message: 'Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n',
        errors: ['Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt file']
      });
    }

    // T√¨m handover
    const handover = await ShiftHandover.findOne({
      where: {
        id,
        fromUserId: currentUser.id,
        status: 'draft'
      }
    });

    if (!handover) {
      // X√≥a c√°c file ƒë√£ upload n·∫øu kh√¥ng t√¨m th·∫•y handover
      req.files.forEach(file => {
        fs.unlinkSync(file.path);
      });
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n nh√°p b√†n giao' });
    }

    // L∆∞u th√¥ng tin file v√†o database
    const fileInfos = req.files.map(file => ({
      filename: file.filename,
      originalname: file.originalname,
      mimetype: file.mimetype,
      size: file.size,
      path: file.path
    }));

    // C·∫≠p nh·∫≠t attachments trong handover
    const currentAttachments = handover.attachments || [];
    await handover.update({
      attachments: [...currentAttachments, ...fileInfos]
    });

    res.json({
      message: 'T·∫£i file l√™n th√†nh c√¥ng',
      files: fileInfos
    });
  } catch (error) {
    console.error('Error uploading handover files:', error);
    // X√≥a c√°c file ƒë√£ upload n·∫øu c√≥ l·ªói
    if (req.files && Array.isArray(req.files)) {
      req.files.forEach(file => {
        try {
          fs.unlinkSync(file.path);
        } catch (err) {
          console.error('Error deleting file:', err);
        }
      });
    }
    res.status(500).json({ message: 'L·ªói khi t·∫£i file l√™n' });
  }
};

// X√≥a file c·ªßa handover
export const deleteHandoverFile = async (req, res) => {
  try {
    const { id, filename } = req.params;
    const currentUser = req.user;

    // T√¨m handover
    const handover = await ShiftHandover.findOne({
      where: {
        id: id,
        fromUserId: currentUser.id,
        status: 'draft'
      }
    });

    if (!handover) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n nh√°p b√†n giao' });
    }

    // T√¨m file c·∫ßn x√≥a
    const attachments = handover.attachments || [];
    const fileIndex = attachments.findIndex(file => file.filename === filename);

    if (fileIndex === -1) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y file' });
    }

    // X√≥a file t·ª´ filesystem
    const filePath = path.join(config.rootDir, config.directories.handover, id.toString(), filename);
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      console.log(`‚úÖ Deleted file: ${filePath}`);
    } else {
      console.warn(`‚ö†Ô∏è File not found at path: ${filePath}`);
    }

    // C·∫≠p nh·∫≠t database - x√≥a file kh·ªèi m·∫£ng attachments
    const updatedAttachments = attachments.filter(file => file.filename !== filename);
    await handover.update({
      attachments: updatedAttachments
    });

    // L·∫•y l·∫°i handover sau khi c·∫≠p nh·∫≠t ƒë·ªÉ ki·ªÉm tra
    const updatedHandover = await ShiftHandover.findByPk(id);
    console.log('Updated handover attachments:', updatedHandover.attachments);

    res.json({
      message: 'X√≥a file th√†nh c√¥ng',
      handover: updatedHandover
    });
  } catch (error) {
    console.error('Error deleting handover file:', error);
    res.status(500).json({ message: 'L·ªói khi x√≥a file' });
  }
};

// Manager-specific endpoints
export const getManagerShifts = async (req, res) => {
  try {
    const shifts = await WorkShift.findAll({
      include: [
        {
          model: User,
          as: 'Users',
          through: { attributes: [] },
          attributes: ['id', 'username', 'fullName']
        },
        {
          model: User,
          as: 'Creator',
          attributes: ['id', 'username', 'fullName']
        }
      ],
      order: [['createdAt', 'DESC']]
    });

    res.json(shifts);
  } catch (error) {
    console.error('Error getting manager shifts:', error);
    res.status(500).json({ message: 'Error getting shifts' });
  }
};

export const createManagerShift = async (req, res) => {
  try {
    const { code, name, startTime, endTime, status } = req.body;

    // Validate required fields
    if (!code || !name || !startTime || !endTime) {
      return res.status(400).json({ message: 'Missing required fields' });
    }

    // Create new shift
    const shift = await WorkShift.create({
      code,
      name,
      startTime,
      endTime,
      status: status || 'not_started'
    });

    res.status(201).json(shift);
  } catch (error) {
    console.error('Error creating shift:', error);
    res.status(500).json({ message: 'Error creating shift' });
  }
};

export const updateManagerShift = async (req, res) => {
  try {
    const { id } = req.params;
    const { code, name, startTime, endTime, status } = req.body;

    // Find shift
    const shift = await WorkShift.findByPk(id);
    if (!shift) {
      return res.status(404).json({ message: 'Shift not found' });
    }

    // Update shift
    await shift.update({
      code: code || shift.code,
      name: name || shift.name,
      startTime: startTime || shift.startTime,
      endTime: endTime || shift.endTime,
      status: status || shift.status
    });

    res.json(shift);
  } catch (error) {
    console.error('Error updating shift:', error);
    res.status(500).json({ message: 'Error updating shift' });
  }
};

export const deleteManagerShift = async (req, res) => {
  try {
    const { id } = req.params;

    // Find shift
    const shift = await WorkShift.findByPk(id);
    if (!shift) {
      return res.status(404).json({ message: 'Shift not found' });
    }

    // Check if shift can be deleted
    if (shift.status !== 'not_started') {
      return res.status(400).json({
        message: 'Cannot delete shift that has already started or completed'
      });
    }

    // Delete shift
    await shift.destroy();

    res.json({ message: 'Shift deleted successfully' });
  } catch (error) {
    console.error('Error deleting shift:', error);
    res.status(500).json({ message: 'Error deleting shift' });
  }
};

// L·∫•y layout c√°c nh√≥m ca ƒë·ªông t·ª´ shiftConfig
export const getShiftLayout = async (req, res) => {
  try {
    // L·∫•y danh s√°ch locations theo th·ª© t·ª± ID ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± hi·ªÉn th·ªã
    const locations = await db.Location.findAll({
      where: { isActive: true },
      order: [['id', 'ASC']]
    });

    // T·∫°o layout theo th·ª© t·ª± ID c·ªßa locations
    const layout = locations.map(location => {
      const group = location.code;
      const groupShifts = Object.entries(shiftConfig)
        .filter(([code, config]) => config.group === group)
        .sort((a, b) => a[1].index - b[1].index);

      const firstShift = groupShifts[0];
      return {
        code: group,
        name: location.name, // S·ª≠ d·ª•ng t√™n t·ª´ location thay v√¨ shift
        locationId: location.id, // Th√™m locationId ƒë·ªÉ frontend c√≥ th·ªÉ s·∫Øp x·∫øp
        shifts: groupShifts.map(([code, config]) => ({
          code,
          name: config.name,
          startTime: config.startTime,
          endTime: config.endTime,
          index: config.index
        }))
      };
    });

    res.json({
      success: true,
      data: layout
    });
  } catch (error) {
    console.error('‚ùå Error in getShiftLayout:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y layout ca tr·ª±c',
      error: error.message
    });
  }
};

// Upload temp files cho handover (ch∆∞a l∆∞u v√†o handover ch√≠nh th·ª©c)
export const uploadTempHandoverFiles = async (req, res) => {
  try {
    const currentUser = req.user;

    // Ki·ªÉm tra files c√≥ t·ªìn t·∫°i kh√¥ng
    if (!req.files || !Array.isArray(req.files) || req.files.length === 0) {
      return res.status(400).json({
        message: 'Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n',
        errors: ['Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt file']
      });
    }

    // T·∫°o session ID cho temp files
    const sessionId = req.body.sessionId || `temp_${currentUser.id}_${Date.now()}`;
    
    // L∆∞u th√¥ng tin file t·∫°m v√†o database ho·∫∑c cache
    const tempFileInfos = req.files.map(file => ({
      filename: file.filename,
      originalname: file.originalname,
      mimetype: file.mimetype,
      size: file.size,
      path: file.path,
      sessionId: sessionId,
      userId: currentUser.id,
      createdAt: new Date()
    }));

    // L∆∞u v√†o temp storage (c√≥ th·ªÉ d√πng Redis ho·∫∑c database)
    // ·ªû ƒë√¢y t·∫°m th·ªùi l∆∞u v√†o memory cache
    if (!global.tempFiles) global.tempFiles = new Map();
    global.tempFiles.set(sessionId, tempFileInfos);

    res.json({
      message: 'T·∫£i file t·∫°m th√†nh c√¥ng',
      sessionId: sessionId,
      files: tempFileInfos.map(f => ({
        filename: f.filename,
        originalname: f.originalname,
        size: f.size
      }))
    });
  } catch (error) {
    console.error('Error uploading temp files:', error);
    // X√≥a c√°c file ƒë√£ upload n·∫øu c√≥ l·ªói
    if (req.files && Array.isArray(req.files)) {
      req.files.forEach(file => {
        try {
          fs.unlinkSync(file.path);
        } catch (err) {
          console.error('Error deleting file:', err);
        }
      });
    }
    res.status(500).json({ message: 'L·ªói khi t·∫£i file t·∫°m' });
  }
};

// Commit temp files v√†o handover ch√≠nh th·ª©c
export const commitTempFilesToHandover = async (req, res) => {
  try {
    const { handoverId, sessionId } = req.body;
    const currentUser = req.user;

    // L·∫•y temp files t·ª´ session
    if (!global.tempFiles || !global.tempFiles.has(sessionId)) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y file t·∫°m' });
    }

    const tempFiles = global.tempFiles.get(sessionId);
    
    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    const userTempFiles = tempFiles.filter(f => f.userId === currentUser.id);
    if (userTempFiles.length === 0) {
      return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file t·∫°m' });
    }

    // T√¨m handover
    const handover = await ShiftHandover.findOne({
      where: {
        id: handoverId,
        fromUserId: currentUser.id,
        status: 'draft'
      }
    });

    if (!handover) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n nh√°p b√†n giao' });
    }

    // T·∫°o th∆∞ m·ª•c handover ch√≠nh th·ª©c
    const uploadsRoot = config.rootDir;
    const handoverDir = path.join(uploadsRoot, config.directories.handover);
    const handoverPath = path.join(handoverDir, handoverId.toString());
    
    if (!fs.existsSync(handoverPath)) {
      fs.mkdirSync(handoverPath, { recursive: true });
    }

    // Di chuy·ªÉn files t·ª´ temp sang handover ch√≠nh th·ª©c
    const fileInfos = [];
    const movedFiles = [];

    for (const tempFile of userTempFiles) {
      try {
        // ƒê∆∞·ªùng d·∫´n file temp (tuy·ªát ƒë·ªëi)
        const tempFilePath = path.isAbsolute(tempFile.path) 
          ? tempFile.path 
          : path.join(uploadsRoot, tempFile.path);
        
        // ƒê∆∞·ªùng d·∫´n file handover m·ªõi
        const handoverFilePath = path.join(handoverPath, tempFile.filename);
        
        // Ki·ªÉm tra file temp c√≥ t·ªìn t·∫°i kh√¥ng
        if (!fs.existsSync(tempFilePath)) {
          console.error(`‚ùå Temp file kh√¥ng t·ªìn t·∫°i: ${tempFilePath}`);
          continue;
        }

        // Di chuy·ªÉn file t·ª´ temp sang handover
        fs.copyFileSync(tempFilePath, handoverFilePath);
        
        // X√≥a file temp sau khi copy th√†nh c√¥ng
        fs.unlinkSync(tempFilePath);
        
        console.log(`‚úÖ ƒê√£ di chuy·ªÉn file: ${tempFile.filename} t·ª´ temp sang handover`);

        // C·∫≠p nh·∫≠t th√¥ng tin file v·ªõi ƒë∆∞·ªùng d·∫´n m·ªõi
        const fileInfo = {
          filename: tempFile.filename,
          originalname: tempFile.originalname,
          mimetype: tempFile.mimetype,
          size: tempFile.size,
          path: path.join(config.directories.handover, handoverId.toString(), tempFile.filename)
        };

        fileInfos.push(fileInfo);
        movedFiles.push(tempFile.filename);

      } catch (error) {
        console.error(`‚ùå L·ªói khi di chuy·ªÉn file ${tempFile.filename}:`, error);
        // Ti·∫øp t·ª•c v·ªõi file kh√°c n·∫øu c√≥ l·ªói
      }
    }

    // C·∫≠p nh·∫≠t attachments trong handover
    const currentAttachments = handover.attachments || [];
    await handover.update({
      attachments: [...currentAttachments, ...fileInfos]
    });

    // X√≥a temp files kh·ªèi cache
    global.tempFiles.delete(sessionId);

    console.log(`‚úÖ ƒê√£ commit ${movedFiles.length} files v√†o handover ${handoverId}`);

    res.json({
      message: `Commit ${movedFiles.length} files th√†nh c√¥ng`,
      files: fileInfos,
      movedFiles: movedFiles
    });
  } catch (error) {
    console.error('Error committing temp files:', error);
    res.status(500).json({ message: 'L·ªói khi commit file' });
  }
};

// Cleanup temp files
export const cleanupTempFiles = async (req, res) => {
  try {
    const { sessionId } = req.params;
    const currentUser = req.user;

    // L·∫•y temp files t·ª´ session
    if (!global.tempFiles || !global.tempFiles.has(sessionId)) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y file t·∫°m' });
    }

    const tempFiles = global.tempFiles.get(sessionId);
    
    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    const userTempFiles = tempFiles.filter(f => f.userId === currentUser.id);
    if (userTempFiles.length === 0) {
      return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file t·∫°m' });
    }

    // X√≥a files t·ª´ filesystem
    userTempFiles.forEach(tempFile => {
      try {
        if (fs.existsSync(tempFile.path)) {
          fs.unlinkSync(tempFile.path);
          console.log(`‚úÖ Deleted temp file: ${tempFile.path}`);
        }
      } catch (err) {
        console.error(`‚ùå Error deleting temp file: ${tempFile.path}`, err);
      }
    });

    // X√≥a kh·ªèi cache
    global.tempFiles.delete(sessionId);

    res.json({
      message: 'Cleanup temp files th√†nh c√¥ng',
      deletedCount: userTempFiles.length
    });
  } catch (error) {
    console.error('Error cleaning up temp files:', error);
    res.status(500).json({ message: 'L·ªói khi cleanup temp files' });
  }
};

// X√≥a file t·∫°m c·ª• th·ªÉ
export const deleteTempFile = async (req, res) => {
  try {
    const { sessionId, filename } = req.params;
    const currentUser = req.user;

    // L·∫•y temp files t·ª´ session
    if (!global.tempFiles || !global.tempFiles.has(sessionId)) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y session t·∫°m' });
    }

    const tempFiles = global.tempFiles.get(sessionId);
    
    // T√¨m file c·∫ßn x√≥a
    const tempFile = tempFiles.find(f => f.filename === filename && f.userId === currentUser.id);
    if (!tempFile) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y file t·∫°m' });
    }

    // X√≥a file t·ª´ filesystem
    try {
      if (fs.existsSync(tempFile.path)) {
        fs.unlinkSync(tempFile.path);
        console.log(`‚úÖ Deleted specific temp file: ${tempFile.path}`);
      } else {
        console.warn(`‚ö†Ô∏è Temp file not found at path: ${tempFile.path}`);
      }
    } catch (err) {
      console.error(`‚ùå Error deleting temp file: ${tempFile.path}`, err);
      return res.status(500).json({ message: 'L·ªói khi x√≥a file t·ª´ server' });
    }

    // X√≥a kh·ªèi cache
    const updatedTempFiles = tempFiles.filter(f => f.filename !== filename);
    if (updatedTempFiles.length === 0) {
      // N·∫øu kh√¥ng c√≤n file n√†o, x√≥a session
      global.tempFiles.delete(sessionId);
    } else {
      // C·∫≠p nh·∫≠t session v·ªõi file ƒë√£ x√≥a
      global.tempFiles.set(sessionId, updatedTempFiles);
    }

    res.json({
      message: 'X√≥a file t·∫°m th√†nh c√¥ng',
      deletedFile: filename
    });
  } catch (error) {
    console.error('Error deleting temp file:', error);
    res.status(500).json({ message: 'L·ªói khi x√≥a file t·∫°m' });
  }
};

// Auto cleanup temp files c≈© (c√≥ th·ªÉ ch·∫°y cron job)
export const cleanupOldTempFiles = async () => {
  try {
    if (!global.tempFiles) return;

    const now = new Date();
    const maxAge = 24 * 60 * 60 * 1000; // 24 gi·ªù

    for (const [sessionId, tempFiles] of global.tempFiles.entries()) {
      const isOld = tempFiles.some(file => 
        (now - new Date(file.createdAt)) > maxAge
      );

      if (isOld) {
        // X√≥a files t·ª´ filesystem
        tempFiles.forEach(tempFile => {
          try {
            if (fs.existsSync(tempFile.path)) {
              fs.unlinkSync(tempFile.path);
              console.log(`‚úÖ Auto deleted old temp file: ${tempFile.path}`);
            }
          } catch (err) {
            console.error(`‚ùå Error auto deleting temp file: ${tempFile.path}`, err);
          }
        });

        // X√≥a kh·ªèi cache
        global.tempFiles.delete(sessionId);
        console.log(`‚úÖ Cleaned up old session: ${sessionId}`);
      }
    }
  } catch (error) {
    console.error('Error in auto cleanup:', error);
  }
};
