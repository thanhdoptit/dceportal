# HƯỚNG DẪN TRIỂN KHAI HỆ THỐNG PROD (ONLINE + OFFLINE) - UBUNTU 24.04

## 1. Tổng quan cấu trúc thư mục hệ thống
/srv
 ├── app/             # Mã nguồn backend, frontend
 ├── gitlab/          # Cấu hình, dữ liệu GitLab
 │    ├── config/     # GitLab configuration
 │    ├── logs/       # GitLab logs
 │    └── data/       # GitLab data (repositories, users, etc.)
 ├── nginx/           # Config và SSL cho Nginx
 │    ├── config/
 │    │    └── default.conf
 │    └── ssl/
 └── sql/             # Docker SQL Server

## 2. Phân bổ port
| Port host | Dịch vụ                          | Ghi chú                                |
|-----------|--------------------------------|--------------------------------------|
| 80        | Nginx Reverse Proxy            | Public HTTP → HTTPS redirect |
| 443       | Nginx Reverse Proxy (SSL)      | Public HTTPS - Production Environment |
| 8443      | Nginx Reverse Proxy (SSL)      | Public HTTPS - Test Environment |
| 5000      | Backend API (Node.js)          | Nội bộ - Production |
| 4000      | Backend API (Node.js)          | Nội bộ - Test |
| 3000      | Frontend Dev Server            | Nội bộ - Test Environment |
| 2222      | GitLab SSH                     | Public cho git clone/push qua SSH |
| 8080      | GitLab UI (internal)           | Nội bộ - GitLab web interface |
| 1433      | SQL Server (Docker)            | Nội bộ |

## 3. Luồng truy cập
Client (HTTP/HTTPS)
    ↓
 [Nginx - Port 80/443/8443]
    ├── Production (Port 443):
    │   ├── / (frontend static)
    │   ├── /api -> backend:5000
    │   ├── /ws -> backend:5000 (WebSocket)
    │   ├── /git -> GitLab UI (port 8080)
    │   └── /uploads -> static files
    │
    └── Test Environment (Port 8443):
        ├── / (frontend dev server:3000)
        ├── /api -> backend:4000
        ├── /ws -> backend:4000 (WebSocket)
        └── /uploads -> static files

## 4. Hướng dẫn cài đặt GitLab từ đầu đến cuối

### 4.1. Chuẩn bị hệ thống
```bash
# Cập nhật hệ thống
sudo apt update && sudo apt upgrade -y

# Cài đặt Docker và Docker Compose
sudo apt install -y ca-certificates curl gnupg lsb-release
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

# Tạo thư mục cấu trúc
sudo mkdir -p /srv/{nginx/config,nginx/ssl,gitlab/config,gitlab/logs,gitlab/data,sql,app}

# Phân quyền cho các thư mục để có thể phát triển
sudo chown -R $USER:$USER /srv/nginx
sudo chown -R $USER:$USER /srv/gitlab
sudo chown -R $USER:$USER /srv/sql
sudo chown -R $USER:$USER /srv/app
sudo chmod -R 755 /srv/nginx
sudo chmod -R 755 /srv/gitlab
sudo chmod -R 755 /srv/sql
sudo chmod -R 755 /srv/app
```

### 4.2. Cấu hình GitLab Docker Compose
Tạo file `/srv/gitlab/docker-compose.yml`:

```yaml
version: "3.9"
services:
  gitlab:
    image: gitlab/gitlab-ce:latest
    container_name: gitlab
    hostname: "gitlab"
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://192.168.1.7/git'
        gitlab_rails['gitlab_shell_ssh_port'] = 2222
        gitlab_rails['gitlab_ssh_host'] = '192.168.1.7'
        gitlab_rails['time_zone'] = 'Asia/Bangkok'
        gitlab_rails['gitlab_email_enabled'] = false
        gitlab_rails['gitlab_default_can_create_group'] = true
        gitlab_rails['gitlab_username_changing_enabled'] = false
        gitlab_rails['gitlab_default_theme'] = 2
        gitlab_rails['gitlab_default_projects_features_builds'] = false
        gitlab_rails['gitlab_default_projects_features_issues'] = true
        gitlab_rails['gitlab_default_projects_features_merge_requests'] = true
        gitlab_rails['gitlab_default_projects_features_wiki'] = true
        gitlab_rails['gitlab_default_projects_features_snippets'] = false
        gitlab_rails['gitlab_default_projects_features_visibility_level'] = 'private'
        gitlab_rails['gitlab_repository_checks_enabled'] = true
        gitlab_rails['gitlab_max_attachment_size'] = 10485760
        gitlab_rails['gitlab_max_import_size'] = 52428800
        gitlab_rails['gitlab_timeout'] = 10
        gitlab_rails['gitlab_ssh_host'] = '192.168.1.7'
        gitlab_rails['gitlab_ssh_port'] = 2222
        gitlab_rails['gitlab_relative_url_root'] = '/git'
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
        # Security improvements
        gitlab_rails['gitlab_trusted_proxies'] = ['192.168.1.7']
        # Performance improvements
        unicorn['worker_timeout'] = 60
        unicorn['worker_memory_limit_min'] = "256MB"
        unicorn['worker_memory_limit_max'] = "512MB"
        unicorn['worker_processes'] = 2
        postgresql['shared_buffers'] = "512MB"
        postgresql['effective_cache_size'] = "1GB"
        redis['max_memory'] = "512MB"
        # Use default Redis configuration
    ports:
      - "8080:80"
      - "2222:22"
    volumes:
      - ./config:/etc/gitlab
      - ./logs:/var/log/gitlab
      - ./data:/var/opt/gitlab
    restart: always
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '2.0'
        reservations:
          memory: 3G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "/opt/gitlab/bin/gitlab-healthcheck", "--fail-fast"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 180s
    networks:
      - gitlab-network

networks:
  gitlab-network:
    driver: bridge
```

### 4.3. Cấu hình Nginx cho GitLab
Tạo file `/srv/nginx/config/default.conf`:

```nginx
# Upstream definitions
upstream backend_api { server localhost:5000; }
upstream backend_dev { server localhost:4000; }
upstream frontend_dev { server localhost:3000; }
upstream gitlab_ui { server localhost:8080; }

# Global settings
client_max_body_size 100M;
client_body_timeout 60s;
client_header_timeout 60s;

# Production Server (Port 443)
server {
    listen 443 ssl http2;
    server_name 192.168.1.7;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Health Check
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # GitLab UI - Port 8080 (internal) - must be before location /
    location ^~ /git/ {
        proxy_pass http://gitlab_ui;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Host $host;
        
        # Optimized buffering for better performance
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 16 8k;
        proxy_busy_buffers_size 16k;
        proxy_temp_file_write_size 16k;
        
        # Optimized timeouts
        proxy_read_timeout 300;
        proxy_connect_timeout 60;
        proxy_send_timeout 300;
        
        # Enable compression
        proxy_set_header Accept-Encoding gzip;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            proxy_pass http://gitlab_ui;
        }
    }
    
    # API endpoints
    location /api/ {
        proxy_pass http://backend_api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Upload endpoints (200MB limit)
    location ~* ^/api/(upload|handover|task|system-info|device-errors)/ {
        client_max_body_size 200M;
        client_body_timeout 600s;
        proxy_request_buffering off;
        proxy_pass http://backend_api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # WebSocket
    location /ws {
        proxy_pass http://backend_api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400;
    }
    
    # Uploads directory
    location /uploads/ {
        alias /var/www/uploads/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Static files
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}

# Test Environment Server (Port 8443)
server {
    listen 8443 ssl http2;
    server_name 192.168.1.7;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Health Check
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Frontend dev server
    location / {
        proxy_pass http://frontend_dev;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # API endpoints
    location /api/ {
        proxy_pass http://backend_dev;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Upload endpoints (200MB limit)
    location ~* ^/api/(upload|handover|task|system-info|device-errors)/ {
        client_max_body_size 200M;
        client_body_timeout 600s;
        proxy_request_buffering off;
        proxy_pass http://backend_dev;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # WebSocket
    location /ws {
        proxy_pass http://backend_dev;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400;
    }
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name 192.168.1.7;
    return 301 https://$server_name$request_uri;
}
```

### 4.4. Cấu hình Nginx Docker Compose
Tạo file `/srv/nginx/docker-compose.yml`:

```yaml
version: "3.9"
services:
  nginx:
    image: nginx:stable
    container_name: nginx
    network_mode: host
    volumes:
      - ./config:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ../app/frontend/dist:/usr/share/nginx/html
      - ../app/uploads:/var/www/uploads
      - /tmp/nginx_uploads:/tmp/nginx_uploads
    restart: always
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
```

### 4.5. Tạo SSL Certificate
```bash
# Tạo thư mục SSL
sudo mkdir -p /srv/nginx/ssl

# Tạo self-signed certificate
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
  -keyout /srv/nginx/ssl/key.pem \
  -out /srv/nginx/ssl/cert.pem \
  -subj "/C=VN/ST=Hanoi/L=Hanoi/O=DCE/OU=IT/CN=192.168.1.7"

# Cấp quyền
sudo chmod 644 /srv/nginx/ssl/cert.pem
sudo chmod 600 /srv/nginx/ssl/key.pem
```

### 4.6. Cấp quyền thư mục
```bash
# Đặt owner cho toàn bộ /srv về user hiện tại
sudo chown -R $USER:$USER /srv

# Với GitLab (bắt buộc chạy bằng user root trong container)
sudo chown -R root:root /srv/gitlab

# Cho phép đọc/ghi/thực thi trong toàn bộ cây thư mục
sudo chmod -R 755 /srv

# Với thư mục cần ghi dữ liệu
sudo chmod -R 775 /srv/app /srv/sql /srv/gitlab

# Tạo thư mục uploads và temp cho nginx
sudo mkdir -p /tmp/nginx_uploads
sudo chmod 755 /tmp/nginx_uploads

# Tạo thư mục app
mkdir -p /srv/app/{frontend,backend,uploads,logs}
sudo chown -R $USER:$USER /srv/app
sudo chmod -R 775 /srv/app
```

### 4.7. Khởi động GitLab
```bash
# Khởi động GitLab
cd /srv/gitlab
docker-compose up -d

# Kiểm tra trạng thái
docker-compose ps
docker logs gitlab

# Chờ GitLab khởi động hoàn toàn (có thể mất 5-10 phút)
# Kiểm tra health
docker exec gitlab /opt/gitlab/bin/gitlab-ctl status
```

### 4.8. Khởi động Nginx
```bash
# Khởi động Nginx
cd /srv/nginx
docker-compose up -d

# Kiểm tra trạng thái
docker-compose ps
docker logs nginx

# Test nginx config
docker exec nginx nginx -t
```

### 4.9. Truy cập GitLab lần đầu
1. **Truy cập GitLab UI**: `https://192.168.1.7/git`
2. **Đăng nhập lần đầu**:
   - Username: `root`
   - Password: Kiểm tra file `/srv/gitlab/config/initial_root_password`
   ```bash
   sudo cat /srv/gitlab/config/initial_root_password
   ```
3. **Đổi password root** sau khi đăng nhập lần đầu

### 4.10. Tạo User và Repository
1. **Tạo user mới** (nếu cần):
   - Vào Admin Area > Users > New User
   - Hoặc sử dụng GitLab Rails Console:
   ```bash
   docker exec gitlab /opt/gitlab/bin/gitlab-rails runner "
   user = User.new(
     username: 'developer',
     email: 'developer@192.168.1.7',
     password: 'Dev@123456',
     password_confirmation: 'Dev@123456',
     name: 'Developer User',
     admin: false,
     confirmed_at: Time.current,
     skip_confirmation: true
   )
   if user.save
     puts 'User created successfully: ' + user.username
   else
     puts 'Error creating user: ' + user.errors.full_messages.join(', ')
   end
   "
   ```

2. **Tạo repository**:
   - Vào GitLab UI > New Project
   - Hoặc tạo qua API

## 5. Cấu hình Git cho SSH

### 5.1. Tạo SSH Key
```bash
# Tạo SSH key
ssh-keygen -t ed25519 -C "your_email@example.com"
# Hoặc
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

# Copy public key
cat ~/.ssh/id_ed25519.pub
```

### 5.2. Thêm SSH Key vào GitLab
1. Vào GitLab UI > User Settings > SSH Keys
2. Paste public key và click "Add key"

### 5.3. Test SSH Connection
```bash
# Test SSH connection
ssh -T git@192.168.1.7 -p 2222

# Clone repository qua SSH
git clone ssh://git@192.168.1.7:2222/dev/dce-portal.git
```

## 6. Cấu hình Git cho HTTPS (nếu cần)
```bash
# Tắt SSL verification cho HTTPS
git config --global http.sslVerify false

# Clone repository qua HTTPS
git clone https://192.168.1.7/git/dev/dce-portal.git
```

## 7. Monitoring và Health Checks

### 7.1. Health Check Script
Tạo file `/srv/check-system.sh`:

```bash
#!/bin/bash

echo "=== GitLab & Nginx System Status Check ==="
echo "Date: $(date)"
echo ""

# Check Docker containers
echo "1. Docker Containers Status:"
echo "============================"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(gitlab|nginx)"
echo ""

# Check container health
echo "2. Container Health Status:"
echo "==========================="
echo "GitLab Health:"
docker exec gitlab /opt/gitlab/bin/gitlab-healthcheck 2>/dev/null | head -5
echo ""
echo "Nginx Health:"
curl -s -k https://192.168.1.7/health 2>/dev/null || echo "Nginx health check failed"
echo ""

# Check resource usage
echo "3. Resource Usage:"
echo "=================="
docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" | grep -E "(gitlab|nginx)"
echo ""

# Check network connectivity
echo "4. Network Connectivity:"
echo "======================="
echo "GitLab direct access (port 8080):"
curl -s -I http://localhost:8080 2>/dev/null | head -1 || echo "GitLab not accessible directly"
echo ""

echo "GitLab via Nginx proxy (/git):"
curl -s -k -I https://192.168.1.7/git 2>/dev/null | head -1 || echo "GitLab proxy not accessible"
echo ""

# Check SSL certificate
echo "5. SSL Certificate Info:"
echo "========================"
openssl s_client -connect 192.168.1.7:443 -servername 192.168.1.7 < /dev/null 2>/dev/null | openssl x509 -noout -subject -dates 2>/dev/null || echo "SSL certificate check failed"
echo ""

# Check recent logs
echo "6. Recent Logs (last 5 lines):"
echo "=============================="
echo "GitLab logs:"
docker logs gitlab --tail 5 2>/dev/null | grep -E "(ERROR|WARN|FATAL)" || echo "No recent errors in GitLab logs"
echo ""

echo "Nginx logs:"
docker logs nginx --tail 5 2>/dev/null | grep -E "(ERROR|WARN|FATAL)" || echo "No recent errors in Nginx logs"
echo ""

# Check disk usage
echo "7. Disk Usage:"
echo "=============="
df -h /srv 2>/dev/null || echo "Disk usage check failed"
echo ""

echo "=== Check Complete ==="
```

### 7.2. Cấp quyền và chạy script
```bash
chmod +x /srv/check-system.sh
./srv/check-system.sh
```

## 8. Troubleshooting GitLab

### 8.1. Common Issues
1. **GitLab chậm**: Tăng memory limit trong docker-compose.yml
2. **500 Error**: Kiểm tra logs `docker logs gitlab`
3. **SSL Error**: Kiểm tra certificate và nginx config
4. **Permission Denied**: Kiểm tra quyền thư mục

### 8.2. Debug Commands
```bash
# GitLab logs
docker logs gitlab

# GitLab status
docker exec gitlab /opt/gitlab/bin/gitlab-ctl status

# GitLab reconfigure
docker exec gitlab /opt/gitlab/bin/gitlab-ctl reconfigure

# Nginx logs
docker logs nginx

# Test nginx config
docker exec nginx nginx -t

# Reload nginx
docker exec nginx nginx -s reload
```

### 8.3. Performance Optimization
```bash
# Tăng memory cho GitLab
# Edit /srv/gitlab/docker-compose.yml
# Thay đổi memory limit từ 6G lên 8G nếu cần

# Restart GitLab
cd /srv/gitlab
docker-compose restart

# Monitor performance
docker stats gitlab nginx
```

## 9. Backup và Restore

### 9.1. Backup GitLab
```bash
# Backup toàn bộ GitLab
docker exec gitlab /opt/gitlab/bin/gitlab-backup create

# Backup config
sudo tar -czf gitlab-config-backup.tar.gz /srv/gitlab/config

# Backup data
sudo tar -czf gitlab-data-backup.tar.gz /srv/gitlab/data
```

### 9.2. Restore GitLab
```bash
# Restore backup
docker exec gitlab /opt/gitlab/bin/gitlab-backup restore BACKUP=timestamp

# Restore config
sudo tar -xzf gitlab-config-backup.tar.gz -C /

# Restart GitLab
cd /srv/gitlab
docker-compose restart
```

## 10. Cập nhật GitLab
```bash
# Pull image mới
cd /srv/gitlab
docker-compose pull

# Backup trước khi update
docker exec gitlab /opt/gitlab/bin/gitlab-backup create

# Update
docker-compose down
docker-compose up -d

# Kiểm tra sau update
docker exec gitlab /opt/gitlab/bin/gitlab-ctl status
```

## 11. Truy cập URLs
- **GitLab UI**: `https://192.168.1.7/git`
- **GitLab Direct**: `http://192.168.1.7:8080`
- **Production**: `https://192.168.1.7/`
- **Test Environment**: `https://192.168.1.7:8443/`
- **Health Check**: `https://192.168.1.7/health`
- **SSH Clone**: `ssh://git@192.168.1.7:2222/dev/dce-portal.git`
- **HTTPS Clone**: `https://192.168.1.7/git/dev/dce-portal.git`

## 12. Security Notes
- **SSL Certificate**: Self-signed cho development, Let's Encrypt cho production
- **Firewall**: Mở ports 80, 443, 8443, 2222
- **Backup**: Định kỳ backup GitLab data và config
- **Updates**: Cập nhật GitLab và Docker images thường xuyên
- **Monitoring**: Sử dụng health check script để monitor hệ thống

## 13. GitHub Integration

### 13.1. Cấu hình GitHub Remote
```bash
# Thêm GitHub remote (giữ nguyên remote GitLab cũ)
git remote add github https://github.com/thanhdoptit/dceportal.git

# Hoặc sử dụng SSH (khuyến nghị)
git remote add github git@github.com:thanhdoptit/dceportal.git

# Kiểm tra remote
git remote -v
```

### 13.2. Push Code lên GitHub
```bash
# Push toàn bộ code lên GitHub
git push github main

# Push tất cả branches
git push github --all

# Push tags
git push github --tags
```

### 13.3. Đồng bộ giữa GitLab và GitHub
```bash
# Push từ GitLab lên GitHub
git push github main

# Pull từ GitHub về GitLab (nếu cần)
git pull github main

# Merge changes
git merge github/main
```

### 13.4. Cấu hình GitHub Actions (tùy chọn)
Tạo file `.github/workflows/deploy.yml`:

```yaml
name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        cd backend && npm install
        cd ../frontend && npm install
        
    - name: Build frontend
      run: |
        cd frontend && npm run build
        
    - name: Deploy to server
      run: |
        echo "Deploy to production server"
        # Add deployment commands here
```

### 13.5. GitHub Repository URLs
- **GitHub Repository**: https://github.com/thanhdoptit/dceportal.git
- **GitHub Web**: https://github.com/thanhdoptit/dceportal
- **Clone HTTPS**: `https://github.com/thanhdoptit/dceportal.git`
- **Clone SSH**: `git@github.com:thanhdoptit/dceportal.git`

### 13.6. Quản lý Multiple Remotes
```bash
# Cấu hình remote cho cả GitLab và GitHub
git remote add origin ssh://git@192.168.1.8:2222/dev/dce-portal.git
git remote add github https://github.com/thanhdoptit/dceportal.git

# Push lên cả hai
git push origin main
git push github main

# Hoặc push tất cả remotes
git remote | xargs -L1 git push
```

### 13.7. Backup Strategy với GitHub
```bash
# Backup toàn bộ repository lên GitHub
git push github main --force

# Tạo backup branch
git checkout -b backup-$(date +%Y%m%d)
git push github backup-$(date +%Y%m%d)

# Restore từ GitHub
git fetch github
git checkout github/main
```

### 13.8. GitHub Security
- **Personal Access Token**: Tạo token với quyền repo
- **SSH Keys**: Cấu hình SSH key cho GitHub
- **Branch Protection**: Bảo vệ branch main
- **Code Review**: Yêu cầu review trước merge
- **Secrets Management**: Sử dụng GitHub Secrets cho sensitive data