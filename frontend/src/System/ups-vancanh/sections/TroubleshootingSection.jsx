import { Alert, Card, Col, Collapse, Divider, Row, Steps, Table, Tag, Typography } from 'antd';
import React from 'react';
import '../../shared/styles/SystemSection.css';

const { Title, Paragraph, Text } = Typography;

const TroubleshootingSection = () => {
  const [currentStep, setCurrentStep] = React.useState(0);

  // C√°c s·ª± c·ªë th∆∞·ªùng g·∫∑p t·ª´ t√†i li·ªáu th·ª±c t·∫ø
  const commonIssues = [
    {
      category: 'S·ª± c·ªë ·∫Øc quy',
      issues: [
        {
          symptom: '·∫Æc quy kh√¥ng s·∫°c',
          causes: [
            'K·∫øt n·ªëi ·∫Øc quy b·ªã l·ªèng ho·∫∑c h∆∞ h·ªèng',
            'B·ªô s·∫°c ·∫Øc quy b·ªã l·ªói',
            '·∫Æc quy b·ªã h·ªèng ho·∫∑c h·∫øt tu·ªïi th·ªç',
            'Nhi·ªát ƒë·ªô m√¥i tr∆∞·ªùng qu√° cao (>50¬∞C)',
            'ƒêi·ªán √°p ·∫Øc quy qu√° th·∫•p'
          ],
          solutions: [
            'Ki·ªÉm tra k·∫øt n·ªëi ·∫Øc quy',
            'Ki·ªÉm tra b·ªô s·∫°c v√† ƒëi·ªán √°p s·∫°c',
            'Thay th·∫ø ·∫Øc quy n·∫øu c·∫ßn thi·∫øt',
            'Ki·ªÉm so√°t nhi·ªát ƒë·ªô m√¥i tr∆∞·ªùng',
            'Ki·ªÉm tra ƒëi·ªán √°p ·∫Øc quy'
          ],
          severity: 'high',
          icon: 'üîã'
        },
        {
          symptom: 'Th·ªùi gian backup ng·∫Øn',
          causes: [
            '·∫Æc quy b·ªã l√£o h√≥a',
            'T·∫£i qu√° cao',
            'Nhi·ªát ƒë·ªô m√¥i tr∆∞·ªùng cao',
            '·∫Æc quy kh√¥ng ƒë∆∞·ª£c s·∫°c ƒë·∫ßy',
            'K·∫øt n·ªëi ·∫Øc quy b·ªã l·ªèng'
          ],
          solutions: [
            'Ki·ªÉm tra tu·ªïi th·ªç ·∫Øc quy',
            'Gi·∫£m t·∫£i ho·∫∑c tƒÉng dung l∆∞·ª£ng ·∫Øc quy',
            'Ki·ªÉm so√°t nhi·ªát ƒë·ªô m√¥i tr∆∞·ªùng',
            'Ki·ªÉm tra chu tr√¨nh s·∫°c',
            'Ki·ªÉm tra k·∫øt n·ªëi ·∫Øc quy'
          ],
          severity: 'medium',
          icon: '‚è∞'
        }
      ]
    },
    {
      category: 'S·ª± c·ªë ƒëi·ªán',
      issues: [
        {
          symptom: 'ƒêi·ªán √°p ƒë·∫ßu ra kh√¥ng ·ªïn ƒë·ªãnh',
          causes: [
            'ƒêi·ªán √°p ƒë·∫ßu v√†o kh√¥ng ·ªïn ƒë·ªãnh',
            'B·ªô l·ªçc ƒëi·ªán b·ªã l·ªói',
            'Inverter b·ªã l·ªói',
            'T·∫£i kh√¥ng c√¢n b·∫±ng',
            'C·∫£m bi·∫øn ƒëi·ªán √°p b·ªã l·ªói'
          ],
          solutions: [
            'Ki·ªÉm tra ngu·ªìn ƒëi·ªán ƒë·∫ßu v√†o',
            'Ki·ªÉm tra b·ªô l·ªçc ƒëi·ªán',
            'Ki·ªÉm tra inverter',
            'C√¢n b·∫±ng t·∫£i',
            'Ki·ªÉm tra c·∫£m bi·∫øn ƒëi·ªán √°p'
          ],
          severity: 'high',
          icon: '‚ö°'
        },
        {
          symptom: 'T·∫ßn s·ªë ƒë·∫ßu ra kh√¥ng ch√≠nh x√°c',
          causes: [
            'B·ªô dao ƒë·ªông t·∫ßn s·ªë b·ªã l·ªói',
            'Inverter b·ªã l·ªói',
            'C·∫£m bi·∫øn t·∫ßn s·ªë b·ªã l·ªói',
            'Ph·∫ßn m·ªÅm ƒëi·ªÅu khi·ªÉn b·ªã l·ªói'
          ],
          solutions: [
            'Ki·ªÉm tra b·ªô dao ƒë·ªông t·∫ßn s·ªë',
            'Ki·ªÉm tra inverter',
            'Ki·ªÉm tra c·∫£m bi·∫øn t·∫ßn s·ªë',
            'C·∫≠p nh·∫≠t firmware'
          ],
          severity: 'medium',
          icon: 'üìä'
        }
      ]
    },
    {
      category: 'S·ª± c·ªë m·∫°ng v√† truy·ªÅn th√¥ng',
      issues: [
        {
          symptom: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi m·∫°ng',
          causes: [
            'C·∫•u h√¨nh IP kh√¥ng ƒë√∫ng',
            'C√°p m·∫°ng b·ªã h∆∞ h·ªèng',
            'Switch/router b·ªã l·ªói',
            'Firewall ch·∫∑n k·∫øt n·ªëi',
            'C·∫•u h√¨nh m·∫°ng kh√¥ng ƒë√∫ng'
          ],
          solutions: [
            'Ki·ªÉm tra c·∫•u h√¨nh IP',
            'Ki·ªÉm tra c√°p m·∫°ng',
            'Ki·ªÉm tra switch/router',
            'Ki·ªÉm tra c·∫•u h√¨nh firewall',
            'Ki·ªÉm tra c·∫•u h√¨nh m·∫°ng'
          ],
          severity: 'medium',
          icon: 'üåê'
        },
        {
          symptom: 'Modbus communication l·ªói',
          causes: [
            'C·∫•u h√¨nh Modbus kh√¥ng ƒë√∫ng',
            'ƒê·ªãa ch·ªâ register kh√¥ng ƒë√∫ng',
            'T·ªëc ƒë·ªô baud kh√¥ng kh·ªõp',
            'C·∫•u h√¨nh master/slave sai',
            'K·∫øt n·ªëi RS485 b·ªã l·ªói'
          ],
          solutions: [
            'Ki·ªÉm tra c·∫•u h√¨nh Modbus',
            'Ki·ªÉm tra ƒë·ªãa ch·ªâ register',
            'ƒê·ªìng b·ªô t·ªëc ƒë·ªô baud',
            'Ki·ªÉm tra c·∫•u h√¨nh master/slave',
            'Ki·ªÉm tra k·∫øt n·ªëi RS485'
          ],
          severity: 'medium',
          icon: 'üîå'
        }
      ]
    }
  ];

  // Quy tr√¨nh kh·∫Øc ph·ª•c s·ª± c·ªë
  const troubleshootingProcedure = [
    {
      title: 'Ph√¢n t√≠ch s·ª± c·ªë',
      description: 'X√°c ƒë·ªãnh ch√≠nh x√°c v·∫•n ƒë·ªÅ v√† m·ª©c ƒë·ªô nghi√™m tr·ªçng',
      steps: [
        'Thu th·∫≠p th√¥ng tin v·ªÅ s·ª± c·ªë',
        'Ki·ªÉm tra c√°c ch·ªâ b√°o LED v√† m√†n h√¨nh',
        'Xem x√©t log s·ª± ki·ªán v√† c·∫£nh b√°o',
        'X√°c ƒë·ªãnh m·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng',
        'Ph√¢n lo·∫°i s·ª± c·ªë theo m·ª©c ƒë·ªô ∆∞u ti√™n'
      ],
      icon: 'üîç'
    },
    {
      title: 'C√°c b∆∞·ªõc kh·∫Øc ph·ª•c',
      description: 'Th·ª±c hi·ªán c√°c bi·ªán ph√°p kh·∫Øc ph·ª•c theo th·ª© t·ª± ∆∞u ti√™n',
      steps: [
        'Th·ª±c hi·ªán c√°c bi·ªán ph√°p an to√†n',
        'Ki·ªÉm tra c√°c k·∫øt n·ªëi c∆° b·∫£n',
        'Ki·ªÉm tra c·∫•u h√¨nh h·ªá th·ªëng',
        'Th·ª±c hi·ªán c√°c test ch·∫©n ƒëo√°n',
        'Thay th·∫ø linh ki·ªán n·∫øu c·∫ßn thi·∫øt'
      ],
      icon: 'üîß'
    },
    {
      title: 'Ki·ªÉm tra sau kh·∫Øc ph·ª•c',
      description: 'X√°c nh·∫≠n s·ª± c·ªë ƒë√£ ƒë∆∞·ª£c kh·∫Øc ph·ª•c ho√†n to√†n',
      steps: [
        'Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng',
        'Th·ª±c hi·ªán test v·∫≠n h√†nh',
        'Ki·ªÉm tra c√°c th√¥ng s·ªë ho·∫°t ƒë·ªông',
        'Ghi ch√©p qu√° tr√¨nh kh·∫Øc ph·ª•c',
        'C·∫≠p nh·∫≠t t√†i li·ªáu b·∫£o tr√¨'
      ],
      icon: '‚úÖ'
    }
  ];

  // C√°c test ch·∫©n ƒëo√°n
  const diagnosticTests = [
    {
      name: 'Runtime Calibration Test',
      description: 'Test hi·ªáu ch·ªânh th·ªùi gian backup c·ªßa ·∫Øc quy',
      procedure: [
        'ƒê·∫£m b·∫£o t·∫£i ·ªïn ƒë·ªãnh',
        'Kh·ªüi ƒë·ªông test t·ª´ menu h·ªá th·ªëng',
        'Theo d√µi qu√° tr√¨nh test',
        'Ghi ch√©p k·∫øt qu·∫£ test',
        'D·ª´ng test khi c·∫ßn thi·∫øt'
      ],
      duration: '30-120 ph√∫t',
      frequency: 'H√†ng th√°ng',
      icon: '‚è±Ô∏è'
    },
    {
      name: 'Battery Test',
      description: 'Test ki·ªÉm tra tr·∫°ng th√°i v√† hi·ªáu su·∫•t ·∫Øc quy',
      procedure: [
        'Ki·ªÉm tra tr·∫°ng th√°i ·∫Øc quy',
        'Kh·ªüi ƒë·ªông test t·ª´ menu h·ªá th·ªëng',
        'Theo d√µi ƒëi·ªán √°p v√† d√≤ng ƒëi·ªán',
        'Ghi ch√©p k·∫øt qu·∫£ test',
        'Ph√¢n t√≠ch k·∫øt qu·∫£ test'
      ],
      duration: '15-60 ph√∫t',
      frequency: 'H√†ng tu·∫ßn',
      icon: 'üîã'
    },
    {
      name: 'Self-Test',
      description: 'Test t·ª± ƒë·ªông ki·ªÉm tra c√°c th√†nh ph·∫ßn h·ªá th·ªëng',
      procedure: [
        'Kh·ªüi ƒë·ªông test t·ª´ menu h·ªá th·ªëng',
        'Theo d√µi qu√° tr√¨nh test',
        'Ki·ªÉm tra k·∫øt qu·∫£ test',
        'X·ª≠ l√Ω c√°c l·ªói n·∫øu c√≥',
        'Ghi ch√©p k·∫øt qu·∫£ test'
      ],
      duration: '5-15 ph√∫t',
      frequency: 'H√†ng ng√†y',
      icon: 'üß™'
    }
  ];

  // C√°c ch·ªâ b√°o LED v√† tr·∫°ng th√°i
  const statusIndicators = [
    {
      category: 'Power Module Status LEDs',
      indicators: [
        {
          name: 'Module Enable LED',
          colors: {
            'Green': 'Module ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
            'Red': 'Module b·ªã l·ªói ho·∫∑c t·∫Øt',
            'Yellow': 'Module ƒëang kh·ªüi ƒë·ªông ho·∫∑c b·∫£o tr√¨',
            'Off': 'Module b·ªã t·∫Øt ho·∫∑c kh√¥ng c√≥ ngu·ªìn'
          }
        },
        {
          name: 'Power Flow LED',
          colors: {
            'Green': 'D√≤ng ƒëi·ªán b√¨nh th∆∞·ªùng',
            'Red': 'Qu√° t·∫£i ho·∫∑c l·ªói',
            'Yellow': 'T·∫£i trung b√¨nh',
            'Off': 'Kh√¥ng c√≥ t·∫£i'
          }
        }
      ]
    },
    {
      category: 'System Status LEDs',
      indicators: [
        {
          name: 'UPS Status LED',
          colors: {
            'Green': 'UPS ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
            'Red': 'UPS b·ªã l·ªói ho·∫∑c t·∫Øt',
            'Yellow': 'UPS ƒëang chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô',
            'Off': 'UPS b·ªã t·∫Øt'
          }
        },
        {
          name: 'Battery Status LED',
          colors: {
            'Green': '·∫Æc quy s·∫°c ƒë·∫ßy',
            'Red': '·∫Æc quy y·∫øu ho·∫∑c l·ªói',
            'Yellow': '·∫Æc quy ƒëang s·∫°c',
            'Off': 'Kh√¥ng c√≥ ·∫Øc quy'
          }
        }
      ]
    }
  ];

  // C√°c bi·ªán ph√°p ph√≤ng ng·ª´a
  const preventiveMeasures = [
    {
      category: 'B·∫£o tr√¨ ƒë·ªãnh k·ª≥',
      measures: [
        'Ki·ªÉm tra tr·ª±c quan h√†ng ng√†y',
        'V·ªá sinh thi·∫øt b·ªã h√†ng tu·∫ßn',
        'Ki·ªÉm tra k·∫øt n·ªëi h√†ng th√°ng',
        'Test h·ªá th·ªëng h√†ng qu√Ω',
        'B·∫£o tr√¨ to√†n di·ªán h√†ng nƒÉm'
      ]
    },
    {
      category: 'Gi√°m s√°t li√™n t·ª•c',
      measures: [
        'Theo d√µi th√¥ng s·ªë ho·∫°t ƒë·ªông',
        'Gi√°m s√°t nhi·ªát ƒë·ªô m√¥i tr∆∞·ªùng',
        'Ki·ªÉm tra log s·ª± ki·ªán',
        'Theo d√µi c·∫£nh b√°o v√† b√°o ƒë·ªông',
        'Ph√¢n t√≠ch xu h∆∞·ªõng d·ªØ li·ªáu'
      ]
    },
    {
      category: 'ƒê√†o t·∫°o nh√¢n vi√™n',
      measures: [
        'ƒê√†o t·∫°o v·∫≠n h√†nh c∆° b·∫£n',
        'ƒê√†o t·∫°o x·ª≠ l√Ω s·ª± c·ªë',
        'C·∫≠p nh·∫≠t ki·∫øn th·ª©c th∆∞·ªùng xuy√™n',
        'Th·ª±c h√†nh c√°c t√¨nh hu·ªëng kh·∫©n c·∫•p',
        'ƒê√°nh gi√° nƒÉng l·ª±c ƒë·ªãnh k·ª≥'
      ]
    }
  ];

  // C√°c l·ªói th∆∞·ªùng g·∫∑p v√† m√£ l·ªói
  const errorCodes = [
    {
      code: 'E001',
      description: 'L·ªói ƒëi·ªán √°p ƒë·∫ßu v√†o qu√° th·∫•p',
      severity: 'High',
      action: 'Ki·ªÉm tra ngu·ªìn ƒëi·ªán ƒë·∫ßu v√†o v√† c·∫•u h√¨nh',
      icon: '‚ö†Ô∏è'
    },
    {
      code: 'E002',
      description: 'L·ªói ƒëi·ªán √°p ƒë·∫ßu ra qu√° cao',
      severity: 'High',
      action: 'Ki·ªÉm tra inverter v√† c·∫£m bi·∫øn ƒëi·ªán √°p',
      icon: '‚ö°'
    },
    {
      code: 'E003',
      description: 'L·ªói nhi·ªát ƒë·ªô qu√° cao',
      severity: 'Medium',
      action: 'Ki·ªÉm tra h·ªá th·ªëng l√†m m√°t v√† th√¥ng gi√≥',
      icon: 'üå°Ô∏è'
    },
    {
      code: 'E004',
      description: 'L·ªói ·∫Øc quy y·∫øu',
      severity: 'Medium',
      action: 'Ki·ªÉm tra tr·∫°ng th√°i ·∫Øc quy v√† b·ªô s·∫°c',
      icon: 'üîã'
    },
    {
      code: 'E005',
      description: 'L·ªói k·∫øt n·ªëi m·∫°ng',
      severity: 'Low',
      action: 'Ki·ªÉm tra c√°p m·∫°ng v√† c·∫•u h√¨nh IP',
      icon: 'üåê'
    }
  ];

  return (
    <div className="content-section">
      <Title level={2} id="section-6">
        6. X·ª¨ L√ù S·ª∞ C·ªê & KH·∫ÆC PH·ª§C
      </Title>
      
      <Paragraph>
        H·ªá th·ªëng UPS Galaxy VL ƒë∆∞·ª£c thi·∫øt k·∫ø v·ªõi ƒë·ªô tin c·∫≠y cao, tuy nhi√™n trong qu√° tr√¨nh v·∫≠n h√†nh v·∫´n c√≥ th·ªÉ g·∫∑p ph·∫£i m·ªôt s·ªë s·ª± c·ªë. 
        Ph·∫ßn n√†y cung c·∫•p h∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ c√°ch nh·∫≠n di·ªán, ph√¢n t√≠ch v√† kh·∫Øc ph·ª•c c√°c s·ª± c·ªë th∆∞·ªùng g·∫∑p.
      </Paragraph>

      <Alert
        message="L∆∞u √Ω quan tr·ªçng v·ªÅ an to√†n"
        description="Khi x·ª≠ l√Ω s·ª± c·ªë, lu√¥n ∆∞u ti√™n an to√†n. Ch·ªâ nh√¢n vi√™n c√≥ tr√¨nh ƒë·ªô m·ªõi ƒë∆∞·ª£c th·ª±c hi·ªán c√°c thao t√°c s·ª≠a ch·ªØa. Tu√¢n th·ªß nghi√™m ng·∫∑t c√°c quy tr√¨nh an to√†n."
        type="warning"
        showIcon
        style={{ marginBottom: '20px' }}
      />

      {/* 6.1 - C√°c s·ª± c·ªë th∆∞·ªùng g·∫∑p */}
      <div id="6.1" className="subsection">
        <Title level={3}>
          6.1. C√°c s·ª± c·ªë th∆∞·ªùng g·∫∑p
        </Title>
        <Card title="Ph√¢n lo·∫°i s·ª± c·ªë theo nguy√™n nh√¢n" style={{ marginBottom: '20px' }}>
        {commonIssues.map((category, index) => (
          <div key={index} id={`6.1.${index + 1}`} className="subsection">
            <Title level={4}>
              6.1.{index + 1}. {category.category}
            </Title>
            <Row gutter={[16, 16]}>
              {category.issues.map((issue, i) => (
                <Col xs={24} lg={12} key={i}>
                <Card 
                  size="small" 
                    title={
                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                        <span style={{ fontSize: '20px' }}>{issue.icon}</span>
                        {issue.symptom}
                      </div>
                    }
                    style={{ 
                      height: '100%',
                      borderLeft: `4px solid ${issue.severity === 'high' ? '#ff4d4f' : 
                                           issue.severity === 'medium' ? '#fa8c16' : '#faad14'}`
                    }}
                  >
                    <div>
                      <Tag color={issue.severity === 'high' ? 'red' : 
                                 issue.severity === 'medium' ? 'orange' : 'yellow'}>
                        {issue.severity === 'high' ? 'Cao' : 
                         issue.severity === 'medium' ? 'Trung b√¨nh' : 'Th·∫•p'}
                      </Tag>
                    </div>
                    
                    <div>
                      <Text strong>Nguy√™n nh√¢n:</Text>
                      <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>
                        {issue.causes.map((cause, j) => (
                          <li key={j}>{cause}</li>
                        ))}
                      </ul>
                      </div>
                    
                    <div>
                      <Text strong>Gi·∫£i ph√°p:</Text>
                      <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>
                        {issue.solutions.map((solution, j) => (
                          <li key={j}>{solution}</li>
                        ))}
                      </ul>
                    </div>
                  </Card>
                    </Col>
              ))}
            </Row>
          </div>
        ))}
        </Card>
      </div>

      {/* 6.2 - Quy tr√¨nh kh·∫Øc ph·ª•c */}
      <div id="6.2" className="subsection">
        <Title level={3}>
          6.2. Quy tr√¨nh kh·∫Øc ph·ª•c
        </Title>
        
        {/* 6.2.1 - Ph√¢n t√≠ch s·ª± c·ªë */}
        <div id="6.2.1" className="subsection">
          <Title level={4}>
            6.2.1. Ph√¢n t√≠ch s·ª± c·ªë
          </Title>
          <Card title="C√°c b∆∞·ªõc ph√¢n t√≠ch s·ª± c·ªë" style={{ marginBottom: '20px' }}>
          <Steps
            current={currentStep}
            onChange={setCurrentStep}
            direction="vertical"
            size="small"
          >
            {troubleshootingProcedure.map((step, index) => (
              <Steps.Step
                key={index}
                title={
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <span style={{ fontSize: '20px' }}>{step.icon}</span>
                    {step.title}
                  </div>
                }
                description={step.description}
                subTitle={
                  <div style={{ marginTop: '8px' }}>
                    <Text strong>C√°c b∆∞·ªõc th·ª±c hi·ªán:</Text>
                    <ol style={{ margin: '4px 0', paddingLeft: '20px' }}>
                      {step.steps.map((s, i) => (
                        <li key={i}>{s}</li>
                      ))}
                    </ol>
                  </div>
                }
              />
            ))}
          </Steps>
          </Card>
        </div>
        
        {/* 6.2.2 - C√°c b∆∞·ªõc kh·∫Øc ph·ª•c */}
        <div id="6.2.2" className="subsection">
          <Title level={4}>
            6.2.2. C√°c b∆∞·ªõc kh·∫Øc ph·ª•c
          </Title>
          <Card title="Quy tr√¨nh kh·∫Øc ph·ª•c chi ti·∫øt" style={{ marginBottom: '20px' }}>
          <Collapse 
            defaultActiveKey={['0']}
            items={troubleshootingProcedure.map((procedure, index) => ({
              key: index.toString(),
              label: procedure.title,
              children: (
                <>
                  <Paragraph>{procedure.description}</Paragraph>
                  <Text strong>C√°c b∆∞·ªõc th·ª±c hi·ªán:</Text>
                  <ol style={{ margin: '8px 0', paddingLeft: '20px' }}>
                    {procedure.steps.map((step, i) => (
                      <li key={i}>{step}</li>
                    ))}
                  </ol>
                </>
              )
            }))}
          />
          </Card>
        </div>
        
        {/* 6.2.3 - Ki·ªÉm tra sau kh·∫Øc ph·ª•c */}
        <div id="6.2.3" className="subsection">
          <Title level={4}>
            6.2.3. Ki·ªÉm tra sau kh·∫Øc ph·ª•c
          </Title>
          <Card title="Checklist ki·ªÉm tra h·ªá th·ªëng" style={{ marginBottom: '20px' }}>
          <Alert
            message="Y√™u c·∫ßu ki·ªÉm tra b·∫Øt bu·ªôc"
            description="Sau khi kh·∫Øc ph·ª•c s·ª± c·ªë, ph·∫£i th·ª±c hi·ªán ƒë·∫ßy ƒë·ªß c√°c b∆∞·ªõc ki·ªÉm tra ƒë·ªÉ ƒë·∫£m b·∫£o h·ªá th·ªëng ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh v√† an to√†n."
            type="info"
            showIcon
            style={{ marginBottom: '16px' }}
          />
          
          <Row gutter={[16, 16]}>
            <Col xs={24} lg={12}>
              <Card size="small" title="Ki·ªÉm tra ch·ª©c nƒÉng c∆° b·∫£n">
                <ul>
                  <li>Ki·ªÉm tra ƒëi·ªán √°p ƒë·∫ßu v√†o/ra</li>
                  <li>Ki·ªÉm tra t·∫ßn s·ªë ƒë·∫ßu ra</li>
                  <li>Ki·ªÉm tra d√≤ng ƒëi·ªán t·∫£i</li>
                  <li>Ki·ªÉm tra tr·∫°ng th√°i ·∫Øc quy</li>
                  <li>Test ch·∫ø ƒë·ªô backup</li>
                </ul>
              </Card>
            </Col>
            <Col xs={24} lg={12}>
              <Card size="small" title="Ki·ªÉm tra an to√†n">
                <ul>
                  <li>Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫•t</li>
                  <li>Ki·ªÉm tra c√°ch ƒëi·ªán</li>
                  <li>Ki·ªÉm tra nhi·ªát ƒë·ªô thi·∫øt b·ªã</li>
                  <li>Ki·ªÉm tra h·ªá th·ªëng c·∫£nh b√°o</li>
                  <li>Ghi ch√©p v√†o nh·∫≠t k√Ω</li>
                </ul>
              </Card>
            </Col>
          </Row>
          </Card>
        </div>
      </div>

      {/* C√°c test ch·∫©n ƒëo√°n */}
      <Card title="C√°c test ch·∫©n ƒëo√°n h·ªá th·ªëng" style={{ marginBottom: '20px' }}>
        <Row gutter={[16, 16]}>
          {diagnosticTests.map((test, index) => (
            <Col xs={24} lg={8} key={index}>
              <Card 
                size="small"
                title={
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <span style={{ fontSize: '20px' }}>{test.icon}</span>
                    {test.name}
                  </div>
                }
                style={{ height: '100%' }}
              >
                <Paragraph>{test.description}</Paragraph>
                
                <div style={{ marginBottom: '8px' }}>
                  <Text strong>Quy tr√¨nh:</Text>
                  <ol style={{ margin: '4px 0', paddingLeft: '20px' }}>
                    {test.procedure.map((step, i) => (
                      <li key={i}>{step}</li>
                    ))}
                  </ol>
                  </div>
                
                <div style={{ marginBottom: '8px' }}>
                  <Text strong>Th·ªùi gian:</Text> <Tag color="blue">{test.duration}</Tag>
                  </div>
                
                  <div>
                  <Text strong>T·∫ßn su·∫•t:</Text> <Tag color="green">{test.frequency}</Tag>
                  </div>
              </Card>
            </Col>
          ))}
        </Row>
      </Card>

      {/* Ch·ªâ b√°o LED v√† tr·∫°ng th√°i */}
      <Card title="Ch·ªâ b√°o LED v√† tr·∫°ng th√°i h·ªá th·ªëng" style={{ marginBottom: '20px' }}>
        {statusIndicators.map((category, index) => (
          <div key={index}>
            <Title level={4}>
              {category.category}
            </Title>
        <Row gutter={[16, 16]}>
              {category.indicators.map((indicator, i) => (
                <Col xs={24} lg={12} key={i}>
                  <Card size="small" title={indicator.name}>
                    <Row gutter={[8, 8]}>
                      {Object.entries(indicator.colors).map(([color, meaning], j) => (
                        <Col xs={12} key={j}>
                          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                            <div style={{
                              width: '12px',
                              height: '12px',
                              borderRadius: '50%',
                              backgroundColor: color === 'Green' ? '#52c41a' : 
                                             color === 'Red' ? '#ff4d4f' : 
                                             color === 'Yellow' ? '#faad14' : '#d9d9d9'
                            }} />
                            <Text strong style={{ fontSize: '12px' }}>{color}:</Text>
                          </div>
                          <Text type="secondary" style={{ fontSize: '11px' }}>{meaning}</Text>
          </Col>
                      ))}
        </Row>
            </Card>
          </Col>
              ))}
        </Row>
          </div>
        ))}
      </Card>

      {/* M√£ l·ªói th∆∞·ªùng g·∫∑p */}
      <Card title="M√£ l·ªói th∆∞·ªùng g·∫∑p v√† h∆∞·ªõng d·∫´n x·ª≠ l√Ω" style={{ marginBottom: '20px' }}>
        <Table
          dataSource={errorCodes}
          rowKey="code"
          columns={[
            {
              title: 'M√£ l·ªói',
              dataIndex: 'code',
              key: 'code',
              width: '15%',
              render: (text) => <Tag color="red" style={{ fontWeight: 'bold' }}>{text}</Tag>
            },
            {
              title: 'M√¥ t·∫£',
              dataIndex: 'description',
              key: 'description',
              width: '35%'
            },
            {
              title: 'M·ª©c ƒë·ªô',
              dataIndex: 'severity',
              key: 'severity',
              width: '15%',
              render: (text) => {
                const color = text === 'High' ? 'red' : text === 'Medium' ? 'orange' : 'yellow';
                return <Tag color={color}>{text}</Tag>;
              }
            },
            {
              title: 'H√†nh ƒë·ªông',
              dataIndex: 'action',
              key: 'action',
              width: '35%'
            }
          ]}
          pagination={false}
          size="small"
        />
            </Card>

      {/* Bi·ªán ph√°p ph√≤ng ng·ª´a */}
      <Card title="Bi·ªán ph√°p ph√≤ng ng·ª´a s·ª± c·ªë" style={{ marginBottom: '20px' }}>
        <Row gutter={[16, 16]}>
          {preventiveMeasures.map((category, index) => (
            <Col xs={24} lg={8} key={index}>
              <Card size="small" title={category.category}>
                <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>
                  {category.measures.map((measure, i) => (
                    <li key={i}>{measure}</li>
                  ))}
              </ul>
            </Card>
          </Col>
          ))}
        </Row>
      </Card>

      {/* H∆∞·ªõng d·∫´n kh·∫©n c·∫•p */}
      <Card title="H∆∞·ªõng d·∫´n x·ª≠ l√Ω kh·∫©n c·∫•p" style={{ marginBottom: '20px' }}>
        <Collapse 
          defaultActiveKey={['0']}
          items={[
            {
              key: '0',
              label: 'Khi c√≥ s·ª± c·ªë ƒëi·ªán nghi√™m tr·ªçng',
              children: (
                <ol>
                  <li>Kh√¥ng ho·∫£ng lo·∫°n, gi·ªØ b√¨nh tƒ©nh</li>
                  <li>Ki·ªÉm tra tr·∫°ng th√°i UPS v√† ·∫Øc quy</li>
                  <li>X√°c nh·∫≠n t·∫£i ƒëang ƒë∆∞·ª£c cung c·∫•p</li>
                  <li>Chu·∫©n b·ªã kh·ªüi ƒë·ªông m√°y ph√°t ƒëi·ªán n·∫øu c·∫ßn</li>
                  <li>B√°o c√°o ngay cho c·∫•p tr√™n</li>
                  <li>Ghi ch√©p chi ti·∫øt s·ª± c·ªë</li>
                </ol>
              )
            },
            {
              key: '1',
              label: 'Khi c√≥ s·ª± c·ªë ·∫Øc quy',
              children: (
                <ol>
                  <li>Ki·ªÉm tra tr·∫°ng th√°i ·∫Øc quy</li>
                  <li>X√°c nh·∫≠n th·ªùi gian backup c√≤n l·∫°i</li>
                  <li>Chu·∫©n b·ªã ngu·ªìn ƒëi·ªán d·ª± ph√≤ng</li>
                  <li>Kh√¥ng t·ª± √Ω s·ª≠a ch·ªØa ·∫Øc quy</li>
                  <li>Li√™n h·ªá k·ªπ thu·∫≠t vi√™n c√≥ chuy√™n m√¥n</li>
                </ol>
              )
            },
            {
              key: '2',
              label: 'Khi c√≥ s·ª± c·ªë m·∫°ng',
              children: (
                <ol>
                  <li>Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng</li>
                  <li>Ki·ªÉm tra c·∫•u h√¨nh IP</li>
                  <li>Test k·∫øt n·ªëi t·ª´ xa</li>
                  <li>Ki·ªÉm tra firewall v√† switch</li>
                  <li>Li√™n h·ªá qu·∫£n tr·ªã vi√™n m·∫°ng n·∫øu c·∫ßn</li>
                </ol>
              )
            }
          ]}
        />
      </Card>

      {/* L∆∞u √Ω quan tr·ªçng */}
      <Card title="L∆∞u √Ω quan tr·ªçng v·ªÅ x·ª≠ l√Ω s·ª± c·ªë" style={{ marginBottom: '20px' }}>
        <Alert
          message="Kh√¥ng t·ª± √Ω s·ª≠a ch·ªØa"
          description="Kh√¥ng t·ª± √Ω s·ª≠a ch·ªØa thi·∫øt b·ªã n·∫øu kh√¥ng c√≥ ƒë·ªß ki·∫øn th·ª©c v√† kinh nghi·ªám. Lu√¥n li√™n h·ªá v·ªõi k·ªπ thu·∫≠t vi√™n c√≥ chuy√™n m√¥n."
          type="warning"
          showIcon
          style={{ marginBottom: '16px' }}
        />
        <Alert
          message="Ghi ch√©p ƒë·∫ßy ƒë·ªß"
          description="Lu√¥n ghi ch√©p chi ti·∫øt qu√° tr√¨nh x·ª≠ l√Ω s·ª± c·ªë, bao g·ªìm th·ªùi gian, tri·ªáu ch·ª©ng, nguy√™n nh√¢n v√† bi·ªán ph√°p kh·∫Øc ph·ª•c."
          type="info"
          showIcon
          style={{ marginBottom: '16px' }}
        />
        <Alert
          message="B√°o c√°o k·ªãp th·ªùi"
          description="B√°o c√°o ngay c√°c s·ª± c·ªë nghi√™m tr·ªçng cho c·∫•p tr√™n v√† b·ªô ph·∫≠n k·ªπ thu·∫≠t ƒë·ªÉ c√≥ bi·ªán ph√°p x·ª≠ l√Ω ph√π h·ª£p."
          type="success"
          showIcon
        />
      </Card>
      
      <Divider />

      <Paragraph className="section-footer">
        H·ªá th·ªëng UPS & ·∫Æc quy BMS - TTDL V√¢n Canh | X·ª≠ l√Ω s·ª± c·ªë v√† kh·∫Øc ph·ª•c
      </Paragraph>
    </div>
  );
};

export default TroubleshootingSection;
