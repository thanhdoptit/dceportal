import React, { useState, useEffect } from 'react';
import { Card, Typography, Divider, List, Tag, Space, Alert, Row, Col, Spin, Button, Image, Input, Modal, Slider, Tooltip } from 'antd';
import '../styles/ImagePreview.css';
import {
  ThunderboltOutlined,
  SafetyOutlined,
  ToolOutlined,
  ExclamationCircleOutlined,
  CalendarOutlined,
  UserOutlined,
  LinkOutlined,
  DownloadOutlined,
  EyeOutlined,
  EditOutlined,
  FileTextOutlined,
  SearchOutlined,
  ZoomInOutlined,
  ZoomOutOutlined,
  FullscreenOutlined,
  FullscreenExitOutlined,
  RotateLeftOutlined,
  RotateRightOutlined,
  CloseOutlined,
  LeftOutlined,
  RightOutlined
} from '@ant-design/icons';
import { useParams, useNavigate } from 'react-router-dom';
import api from '../services/api';
import { useAuth } from '../contexts/AuthContext';
import { processFileName } from '../utils/VietnameseFile';
import ImagePreviewModal from '../components/common/ImagePreviewModal';

const { Title, Paragraph, Text } = Typography;

// D·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho UPS system
const defaultUPSData = {
  title: "H·ªá th·ªëng UPS (Uninterruptible Power Supply)",
  subtitle: "H·ªá th·ªëng cung c·∫•p ƒëi·ªán li√™n t·ª•c cho trung t√¢m d·ªØ li·ªáu",
  content: `# H·ªá th·ªëng UPS (Uninterruptible Power Supply)

## M·ª•c ƒë√≠ch
H·ªá th·ªëng UPS ƒë·∫£m b·∫£o cung c·∫•p ƒëi·ªán li√™n t·ª•c cho c√°c thi·∫øt b·ªã quan tr·ªçng trong trung t√¢m d·ªØ li·ªáu, b·∫£o v·ªá kh·ªèi c√°c s·ª± c·ªë ƒëi·ªán v√† ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh.

- Cung c·∫•p ƒëi·ªán d·ª± ph√≤ng khi m·∫•t ƒëi·ªán l∆∞·ªõi
- L·ªçc v√† ·ªïn ƒë·ªãnh ƒëi·ªán √°p
- B·∫£o v·ªá thi·∫øt b·ªã kh·ªèi s·ª± c·ªë ƒëi·ªán
- ƒê·∫£m b·∫£o th·ªùi gian chuy·ªÉn ƒë·ªïi nhanh ch√≥ng

## ... (b·∫°n c√≥ th·ªÉ b·ªï sung th√™m n·ªôi dung m·∫´u ·ªü ƒë√¢y) ...`
};

// Component t√πy ch·ªânh ƒë·ªÉ hi·ªÉn th·ªã h√¨nh ·∫£nh qua API
const ImagePreview = ({ image, systemInfoId, style, onClick }) => {
  const [imageUrl, setImageUrl] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);

  useEffect(() => {
    let url;
    const loadImage = async () => {
      try {
        setLoading(true);
        setError(false);
        const token = localStorage.getItem('token');
        console.log('üîç ImagePreview - Token:', token ? 'C√≥ token' : 'Kh√¥ng c√≥ token');
        console.log('üîç ImagePreview - Loading image:', image.filename);
        console.log('üîç ImagePreview - SystemInfoId:', systemInfoId);
        console.log('üîç ImagePreview - Image path:', image.path);
        console.log('üîç ImagePreview - Full URL:', `${import.meta.env.VITE_API_URL}/api/system-info/${systemInfoId}/files/${image.filename}`);

        const res = await fetch(`${import.meta.env.VITE_API_URL}/api/system-info/${systemInfoId}/files/${image.filename}`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        console.log('üîç ImagePreview - Response status:', res.status);
        if (!res.ok) {
          console.error('üîç ImagePreview - Response not ok:', res.status, res.statusText);
          throw new Error('Fetch image failed');
        }
        const blob = await res.blob();
        url = window.URL.createObjectURL(blob);
        setImageUrl(url);
        console.log('üîç ImagePreview - Image loaded successfully');
      } catch (err) {
        console.error('Error loading image (fetch):', err);
        setError(true);
      } finally {
        setLoading(false);
      }
    };
    if (systemInfoId && image.filename) loadImage();
    return () => {
      if (url) window.URL.revokeObjectURL(url);
    };
  }, [systemInfoId, image.filename]);

  if (loading) return (
    <div style={{
      ...style,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      background: '#f0f0f0',
      borderRadius: '4px'
    }}>
      <Spin size="large" />
    </div>
  );

  if (error) return (
    <div style={{
      ...style,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      background: '#f0f0f0',
      borderRadius: '4px',
      color: '#999',
      fontSize: '14px'
    }}>
      <ExclamationCircleOutlined style={{ marginRight: 8 }} />
      L·ªói t·∫£i ·∫£nh
    </div>
  );

  return (
    <img
      src={imageUrl}
      alt={image.originalName}
      style={style}
      onClick={(e) => {
        console.log('Image clicked', image, onClick);
        if (onClick) onClick(e);
      }}
    />
  );
};

const SystemInfoPage = () => {
  const [systemInfo, setSystemInfo] = useState(null);
  const [systemList, setSystemList] = useState([]);
  const [loading, setLoading] = useState(true);
  const [dataReady, setDataReady] = useState(false);
  const [error, setError] = useState(null);
  const [search, setSearch] = useState('');
  const { systemType } = useParams();
  const { currentUser } = useAuth();
  const navigate = useNavigate();
  const [previewVisible, setPreviewVisible] = useState(false);
  const [previewIndex, setPreviewIndex] = useState(0);
  const [currentPreviewImages, setCurrentPreviewImages] = useState([]);
  const [currentPreviewTitle, setCurrentPreviewTitle] = useState('');


  // H√†m helper ƒë·ªÉ l·∫•y prefix route theo role
  const getRoutePrefix = () => {
    if (!currentUser) return '/dc';
    const role = currentUser.role?.toLowerCase();
    switch (role) {
      case 'manager':
        return '/manager';
      case 'be':
        return '/be';
      case 'datacenter':
      default:
        return '/dc';
    }
  };

  // H√†m navigate ƒë·∫øn chi ti·∫øt h·ªá th·ªëng
  const navigateToSystemDetail = (systemType) => {
    const prefix = getRoutePrefix();
    const targetPath = `${prefix}/system-info/${systemType}`;
    console.log('SystemInfoPage - Navigating to:', targetPath);
    console.log('SystemInfoPage - Current user:', currentUser);
    console.log('SystemInfoPage - System type:', systemType);
    navigate(targetPath);
  };

  // Load danh s√°ch h·ªá th·ªëng n·∫øu kh√¥ng c√≥ systemType
  const loadSystemList = async () => {
    setLoading(true);
    setError(null);
    setDataReady(false);
    try {
      const response = await api.get('/api/system-info');
      if (response.data.success && Array.isArray(response.data.data)) {
        setSystemList(response.data.data);
        setDataReady(true);
      } else {
        setError('Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch h·ªá th·ªëng.');
      }
    } catch {
      setError('L·ªói k·∫øt n·ªëi server. Vui l√≤ng th·ª≠ l·∫°i sau.');
    } finally {
      setLoading(false);
    }
  };

  // Load th√¥ng tin h·ªá th·ªëng chi ti·∫øt
  const loadSystemInfo = async () => {
    setLoading(true);
    setError(null);
    setDataReady(false);
    try {
      console.log('üîç SystemInfoPage - Loading system info for type:', systemType);

      // Th·ª≠ load t·ª´ API theo systemType
      const response = await api.get(`/api/system-info/type/${systemType || 'ups'}`);
      console.log('üîç SystemInfoPage - API response:', response.data);

      if (response.data.success && response.data.data) {
        const apiData = response.data.data;
        console.log('üîç SystemInfoPage - API data:', apiData);

        let parsedContent = apiData.content;
        if (typeof parsedContent === 'string') {
          try {
            parsedContent = JSON.parse(parsedContent);
          } catch {
            parsedContent = {};
          }
        }

        console.log('üîç SystemInfoPage - Parsed content:', parsedContent);

        // Fallback: n·∫øu content kh√¥ng c√≥ d·ªØ li·ªáu, t·∫°o t·ª´ c√°c tr∆∞·ªùng ri√™ng l·∫ª
        if (!parsedContent || Object.keys(parsedContent).length === 0) {
          parsedContent = {
            purpose: { description: apiData.purpose || '', items: [], files: [] },
            components: { items: [], files: [] },
            operation: { normal: { steps: [], files: [] }, backup: { steps: [], files: [] } },
            procedures: { items: [], files: [] },
            troubleshooting: { description: apiData.troubleshooting || '', items: [], files: [] }
          };
        }

        setSystemInfo({
          ...apiData,
          content: parsedContent
        });
        setDataReady(true);
        console.log('üîç SystemInfoPage - System info set successfully');
        return;
      }

      // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ API, th·ª≠ load t·∫•t c·∫£ v√† t√¨m theo systemType
      console.log('üîç SystemInfoPage - No data found by type, trying to load all...');
      const allResponse = await api.get('/api/system-info');
      if (allResponse.data.success && Array.isArray(allResponse.data.data)) {
        const allSystems = allResponse.data.data;
        console.log('üîç SystemInfoPage - All systems:', allSystems);

        // T√¨m system theo systemType
        const foundSystem = allSystems.find(system =>
          system.systemType?.toLowerCase() === systemType?.toLowerCase()
        );

        if (foundSystem) {
          console.log('üîç SystemInfoPage - Found system by type:', foundSystem);
          let parsedContent = foundSystem.content;
          if (typeof parsedContent === 'string') {
            try {
              parsedContent = JSON.parse(parsedContent);
            } catch {
              parsedContent = {};
            }
          }

          setSystemInfo({
            ...foundSystem,
            content: parsedContent
          });
          setDataReady(true);
          return;
        }
      }

      // N·∫øu kh√¥ng t√¨m th·∫•y, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
      console.log('üîç SystemInfoPage - Using default data');
      setSystemInfo(defaultUPSData);
      setDataReady(true);
    } catch (error) {
      console.error('üîç SystemInfoPage - Error loading system info:', error);
      if (error.response?.status === 404) {
        setSystemInfo(defaultUPSData);
        setDataReady(true);
      } else {
        setError('L·ªói k·∫øt n·ªëi server. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // Reset dataReady khi component mount ho·∫∑c systemType thay ƒë·ªïi
    setDataReady(false);

    if (!systemType) {
      loadSystemList();
    } else {
      loadSystemInfo();
    }
    // eslint-disable-next-line
  }, [systemType]);

  // ƒê·∫£m b·∫£o lu√¥n c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã
  const displayData = systemInfo || defaultUPSData;

  // L·∫•y documents v√† images t·ª´ content JSON - h·ªó tr·ª£ c·∫£ c·∫•u tr√∫c c≈© v√† m·ªõi
  const getFilesFromContent = (section) => {
    if (!displayData.content || typeof displayData.content !== 'object') return [];

    // C·∫•u tr√∫c m·ªõi: files trong t·ª´ng item c·ªßa section
    if (section === 'components' && displayData.content.components?.items) {
      const allFiles = [];
      displayData.content.components.items.forEach(item => {
        if (item.images) allFiles.push(...item.images);
        if (item.documents) allFiles.push(...item.documents);
      });
      return allFiles;
    }

    if (section === 'procedures' && displayData.content.procedures?.items) {
      const allFiles = [];
      displayData.content.procedures.items.forEach(item => {
        if (item.images) allFiles.push(...item.images);
        if (item.documents) allFiles.push(...item.documents);
      });
      return allFiles;
    }

    if (section === 'troubleshooting' && displayData.content.troubleshooting?.items) {
      const allFiles = [];
      displayData.content.troubleshooting.items.forEach(item => {
        if (item.images) allFiles.push(...item.images);
        if (item.documents) allFiles.push(...item.documents);
      });
      return allFiles;
    }

    if (section === 'operation' && displayData.content.operation?.items) {
      const allFiles = [];
      displayData.content.operation.items.forEach(item => {
        if (item.images) allFiles.push(...item.images);
        if (item.documents) allFiles.push(...item.documents);
      });
      return allFiles;
    }

    // Section general: files tr·ª±c ti·∫øp trong section (c·∫•u tr√∫c ƒë·∫∑c bi·ªát)
    if (section === 'general' && displayData.content.general?.files) {
      return displayData.content.general.files;
    }

    // C·∫•u tr√∫c c≈©: files tr·ª±c ti·∫øp trong section
    return displayData.content[section]?.files || [];
  };

  const generalFiles = getFilesFromContent('general');

  // T√°ch images v√† documents t·ª´ files
  const separateFiles = (files) => {
    const images = [];
    const documents = [];
    files.forEach(file => {
      // X·ª≠ l√Ω file t·ª´ section general (c√≥ response object)
      let fileData = file;
      if (file.response) {
        fileData = file.response;
      }

      if (fileData.mimetype && fileData.mimetype.startsWith('image/')) {
        images.push(fileData);
      } else {
        documents.push(fileData);
      }
    });
    return { images, documents };
  };

  const generalImages = separateFiles(generalFiles).images;
  const generalDocuments = separateFiles(generalFiles).documents;

  // Debug t√†i li·ªáu chung (c√≥ th·ªÉ x√≥a sau khi test xong)
  // console.log('üîç General files:', generalFiles);
  // console.log('üîç General images:', generalImages);
  // console.log('üîç General documents:', generalDocuments);

  // ƒê·∫£m b·∫£o content l√† object ƒë·ªÉ render JSON
  let contentObj = null;

  // Ki·ªÉm tra an to√†n tr∆∞·ªõc khi truy c·∫≠p content
  if (displayData && displayData.content) {
    if (typeof displayData.content === 'object') {
      contentObj = displayData.content;
    }
  }

  function cleanArray(arr) {
    return Array.isArray(arr) ? arr.filter(item => item !== null && item !== undefined) : [];
  }

  // Ki·ªÉm tra an to√†n tr∆∞·ªõc khi truy c·∫≠p properties
  if (contentObj) {
    if (contentObj.purpose && Array.isArray(contentObj.purpose.items)) {
      contentObj.purpose.items = cleanArray(contentObj.purpose.items);
    }
    if (contentObj.components && Array.isArray(contentObj.components.items)) {
      contentObj.components.items = cleanArray(contentObj.components.items);
    }
    if (contentObj.operation) {
      if (contentObj.operation.normal && Array.isArray(contentObj.operation.normal.steps)) {
        contentObj.operation.normal.steps = cleanArray(contentObj.operation.normal.steps);
      }
      if (contentObj.operation.backup && Array.isArray(contentObj.operation.backup.steps)) {
        contentObj.operation.backup.steps = cleanArray(contentObj.operation.backup.steps);
      }
    }
    if (contentObj.procedures && Array.isArray(contentObj.procedures.items)) {
      contentObj.procedures.items = cleanArray(contentObj.procedures.items);
    }
    if (contentObj.troubleshooting && Array.isArray(contentObj.troubleshooting.items)) {
      contentObj.troubleshooting.items = cleanArray(contentObj.troubleshooting.items);
    }
  }

  // H√†m download file qua API (b·∫£o m·∫≠t, c√≥ token)
  const handleDownloadImage = async (image) => {
    try {
      console.log('üîç Download image:', image);
      console.log('üîç Image path:', image.path);
      console.log('üîç SystemInfo ID:', systemInfo?.id);

      if (!image.path) {
        console.error('‚ùå Image path is undefined:', image);
        return;
      }

      const response = await api.get(`/api/system-info/${systemInfo.id}/files/${encodeURIComponent(image.path)}`, {
        responseType: 'blob'
      });
      const blob = new Blob([response.data], { type: image.mimetype || 'application/octet-stream' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = processFileName(image);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Download image error:', error);
    }
  };

  // H√†m x√°c ƒë·ªãnh username ƒë∆∞·ª£c ph√©p ch·ªânh s·ª≠a n·ªôi dung h·ªá th·ªëng
  const canEditSystemInfo = (username) => {
    // Danh s√°ch username ƒë∆∞·ª£c ph√©p ch·ªânh s·ª≠a
    const allowedUsernames = [
      'dce1',
      'dopt'
    ];

    // Ki·ªÉm tra username c√≥ trong danh s√°ch kh√¥ng
    return allowedUsernames.includes(username?.toLowerCase());
  };

  // H√†m download file qua API (b·∫£o m·∫≠t, c√≥ token) - cho documents
  const handleDownloadDocument = async (doc) => {
    try {
      console.log('üîç Download document:', doc);
      console.log('üîç Document path:', doc.path);
      console.log('üîç SystemInfo ID:', systemInfo?.id);

      if (!doc.path) {
        console.error('‚ùå Document path is undefined:', doc);
        return;
      }

      const response = await api.get(`/api/system-info/${systemInfo.id}/files/${encodeURIComponent(doc.path)}`, {
        responseType: 'blob'
      });
      const blob = new Blob([response.data], { type: doc.mimetype || 'application/octet-stream' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = processFileName(doc);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Download document error:', error);
    }
  };

  // H√†m m·ªü preview v·ªõi ·∫£nh t·ª´ m·ª•c c·ª• th·ªÉ
  const openPreview = (images, title, index = 0) => {
    console.log('openPreview called', { images, title, index });
    setCurrentPreviewImages(images);
    setCurrentPreviewTitle(title);
    setPreviewIndex(index);
    setPreviewVisible(true);
  };

  // H√†m chuy·ªÉn ·∫£nh
  const nextImage = () => {
    setPreviewIndex((previewIndex + 1) % currentPreviewImages.length);
  };

  const prevImage = () => {
    setPreviewIndex((previewIndex - 1 + currentPreviewImages.length) % currentPreviewImages.length);
  };





  // N·∫øu kh√¥ng c√≥ systemType: Hi·ªÉn th·ªã danh s√°ch h·ªá th·ªëng
  if (!systemType) {
    return (
      <div style={{ padding: '24px', maxWidth: '1200px', margin: '0 auto' }}>
        <Title level={2} style={{ color: '#1890ff', marginBottom: 24 }}>
          <ThunderboltOutlined style={{ marginRight: 12 }} />
          Danh s√°ch h·ªá th·ªëng k·ªπ thu·∫≠t trung t√¢m d·ªØ li·ªáu
        </Title>
        <Input
          placeholder="T√¨m ki·∫øm theo t√™n h·ªá th·ªëng..."
          prefix={<SearchOutlined />}
          style={{ marginBottom: 24, maxWidth: 400 }}
          allowClear
          value={search}
          onChange={e => setSearch(e.target.value)}
        />
        {loading || !dataReady ? (
          <Spin size="large" />
        ) : error ? (
          <Alert message="L·ªói" description={error} type="error" showIcon />
        ) : (
          <Row gutter={[24, 24]}>
            {/* C·ªôt 1: H·ªá th·ªëng c√≥ ID t·ª´ 1-8 */}
            <Col xs={24} md={12}>
              <Card title="H·ªá th·ªëng ch√≠nh (ID: 1-8)" style={{ marginBottom: '16px' }}>
                {systemList
                  .filter(sys => sys.id >= 1 && sys.id <= 8)
                  .filter(sys =>
                    !search ||
                    sys.title?.toLowerCase().includes(search.toLowerCase()) ||
                    sys.subtitle?.toLowerCase().includes(search.toLowerCase())
                  )
                  .map((sys, idx) => (
                    <Card
                      key={sys.id || idx}
                      size="small"
                      title={`${sys.title}`}
                      extra={
                        <Button
                          type="link"
                          icon={<EyeOutlined />}
                          onClick={() => navigateToSystemDetail(sys.systemType)}
                        >
                          Xem
                        </Button>
                      }
                      style={{ marginBottom: '12px' }}
                      hoverable
                    >
                      <Paragraph type="secondary" style={{ marginBottom: '8px' }}>
                        {sys.subtitle}
                      </Paragraph>

                    </Card>
                  ))}
              </Card>
            </Col>

            {/* C·ªôt 2: H·ªá th·ªëng c√≥ ID t·ª´ 9-16 */}
            <Col xs={24} md={12}>
              <Card title="H·ªá th·ªëng ph·ª• tr·ª£ (ID: 9-15)" style={{ marginBottom: '16px' }}>
                {systemList
                  .filter(sys => sys.id >= 9 && sys.id <= 15)
                  .filter(sys =>
                    !search ||
                    sys.title?.toLowerCase().includes(search.toLowerCase()) ||
                    sys.subtitle?.toLowerCase().includes(search.toLowerCase())
                  )
                  .map((sys, idx) => (
                    <Card
                      key={sys.id || idx}
                      size="small"
                      title={`${sys.id}. ${sys.title}`}
                      extra={
                        <Button
                          type="link"
                          icon={<EyeOutlined />}
                          onClick={() => navigateToSystemDetail(sys.systemType)}
                        >
                          Xem
                        </Button>
                      }
                      style={{ marginBottom: '12px' }}
                      hoverable
                    >
                      <Paragraph type="secondary" style={{ marginBottom: '8px' }}>
                        {sys.subtitle}
                      </Paragraph>

                    </Card>
                  ))}
              </Card>
            </Col>
          </Row>
        )}
      </div>
    );
  }

  // N·∫øu c√≥ systemType: Hi·ªÉn th·ªã chi ti·∫øt nh∆∞ c≈©
  if (loading || !dataReady) {
    return (
      <div style={{ padding: '24px', textAlign: 'center' }}>
        <Spin size="large" />
        <div style={{ marginTop: '16px' }}>ƒêang t·∫£i th√¥ng tin h·ªá th·ªëng...</div>
      </div>
    );
  }

  if (error && !systemInfo) {
    return (
      <div style={{ padding: '24px', textAlign: 'center' }}>
        <Alert
          message="L·ªói"
          description={error}
          type="error"
          showIcon
        />
        <Button
          type="primary"
          style={{ marginTop: '16px' }}
          onClick={() => navigate(-1)}
        >
          Quay l·∫°i
        </Button>
      </div>
    );
  }

  return (
    <div style={{ padding: '24px', maxWidth: '1200px', margin: '0 auto' }}>
      {console.log('üîç Main return statement rendered, previewVisible:', previewVisible)}
      {/* Header */}
      <div style={{ textAlign: 'center', marginBottom: '32px' }}>
        <Title level={1} style={{ color: '#1890ff', marginBottom: '8px' }}>
          <ThunderboltOutlined style={{ marginRight: '12px' }} />
          {displayData.title}
        </Title>
        <Text type="secondary" style={{ fontSize: '16px' }}>
          {displayData.subtitle}
        </Text>
        {/* N√∫t ch·ªânh s·ª≠a cho admin/manager - ch·ªâ hi·ªÉn th·ªã khi c√≥ d·ªØ li·ªáu th·ª±c t·ª´ API */}
        {canEditSystemInfo(currentUser?.username) && systemInfo && systemInfo.id && (
          <div style={{ marginTop: '16px' }}>
            <Button
              type="primary"
              icon={<EditOutlined />}
              style={{ backgroundColor: '#003c71', borderColor: '#003c71' }}
              onClick={() => {
                let rolePrefix = '/dc';
                if (currentUser?.role?.toLowerCase() === 'manager') rolePrefix = '/manager';
                if (currentUser?.role?.toLowerCase() === 'be') rolePrefix = '/be';

                console.log('Edit button clicked - systemInfo:', systemInfo);
                console.log('systemInfo.id:', systemInfo.id);

                // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang edit v·ªõi ID
                console.log('Navigating to edit page with ID:', systemInfo.id);
                navigate(`${rolePrefix}/system-info/edit/${systemInfo.id}`);
              }}
            >
              Ch·ªânh s·ª≠a n·ªôi dung
            </Button>
          </div>
        )}


      </div>

      {/* N·ªôi dung chi ti·∫øt ƒë·ªông ho·∫∑c markdown */}
      {contentObj ? (
        <>
          {/* M·ª•c ƒë√≠ch */}
          {contentObj.purpose && (
            <Card title={`üéØ ${contentObj.purpose.title || 'M·ª•c ƒë√≠ch'}`} style={{ marginBottom: '24px' }}>
              <Paragraph style={{ fontSize: '16px', lineHeight: '1.6' }}>
                {contentObj.purpose.description}
              </Paragraph>
              {contentObj.purpose.items && (
                <List
                  dataSource={contentObj.purpose.items}
                  renderItem={(item) => (
                    <List.Item style={{ border: 'none', padding: '4px 0' }}>
                      <Text>‚Ä¢ {item}</Text>
                    </List.Item>
                  )}
                />
              )}
            </Card>
          )}

          {/* Th√†nh ph·∫ßn ch√≠nh */}
          {contentObj.components && (
            <Card title={`üîß ${contentObj.components.title || 'Th√†nh ph·∫ßn ch√≠nh'}`} style={{ marginBottom: '24px' }}>
              <Row gutter={[16, 16]}>
                {contentObj.components.items?.map((component, index) => (
                  <Col xs={24} md={12} key={index}>
                    <Card size="small" title={component.name} style={{ height: '100%' }}>
                      <Paragraph>
                        <Text strong>Ch·ª©c nƒÉng:</Text> {component.description}
                      </Paragraph>
                      {component.tag && <Tag color="blue">{component.tag}</Tag>}

                      {/* Hi·ªÉn th·ªã ·∫£nh c·ªßa th√†nh ph·∫ßn */}
                      {component.images && component.images.filter(img => img.filename).length > 0 && (
                        <div style={{ marginTop: '16px' }}>
                          <Text strong>H√¨nh ·∫£nh:</Text>
                          <Row gutter={[8, 8]} style={{ marginTop: '8px' }}>
                            {component.images.filter(img => img.filename).map((image, imgIndex) => (
                              <Col span={8} key={imgIndex}>
                                <ImagePreview
                                  image={image}
                                  systemInfoId={systemInfo?.id}
                                  style={{
                                    width: '100%',
                                    height: '80px',
                                    objectFit: 'cover',
                                    cursor: 'pointer',
                                    borderRadius: '4px'
                                  }}
                                  onClick={() => {
                                    openPreview(component.images.filter(img => img.filename), component.name, imgIndex);
                                  }}
                                />
                              </Col>
                            ))}
                          </Row>
                        </div>
                      )}

                      {/* Hi·ªÉn th·ªã t√†i li·ªáu c·ªßa th√†nh ph·∫ßn */}
                      {component.documents && component.documents.filter(doc => doc.filename).length > 0 && (
                        <div style={{ marginTop: '16px' }}>
                          <Text strong>T√†i li·ªáu:</Text>
                          <List
                            size="small"
                            dataSource={component.documents.filter(doc => doc.filename)}
                            renderItem={(doc) => (
                              <List.Item style={{ padding: '4px 0' }}>
                                <Space>
                                  <FileTextOutlined />
                                  <Text>{processFileName(doc)}</Text>
                                  <Button
                                    type="link"
                                    size="small"
                                    icon={<DownloadOutlined />}
                                    onClick={() => handleDownloadDocument(doc)}
                                  >
                                    T·∫£i
                                  </Button>
                                </Space>
                              </List.Item>
                            )}
                          />
                        </div>
                      )}
                    </Card>
                  </Col>
                ))}
              </Row>
            </Card>
          )}

          {/* Quy tr√¨nh v·∫≠n h√†nh */}
          {contentObj.procedures && (
            <Card title={`üìã ${contentObj.procedures.title || 'Quy tr√¨nh v·∫≠n h√†nh'}`} style={{ marginBottom: '24px' }}>
              <Paragraph style={{ fontSize: '16px', lineHeight: '1.6', marginBottom: '16px' }}>
                {contentObj.procedures.description}
              </Paragraph>
              <List
                dataSource={contentObj.procedures.items}
                renderItem={(section) => (
                  <List.Item>
                    <Card size="small" title={section.title} style={{ width: '100%' }}>
                      <List
                        size="small"
                        dataSource={section.steps}
                        renderItem={(step, stepIndex) => (
                          <List.Item style={{ border: 'none', padding: '4px 0' }}>
                            <Text>{stepIndex + 1}. {step}</Text>
                          </List.Item>
                        )}
                      />

                      {/* Hi·ªÉn th·ªã ·∫£nh c·ªßa quy tr√¨nh */}
                      {section.images && section.images.filter(img => img.filename).length > 0 && (
                        <div style={{ marginTop: '16px' }}>
                          <Text strong>H√¨nh ·∫£nh:</Text>
                          <Row gutter={[8, 8]} style={{ marginTop: '8px' }}>
                            {section.images.filter(img => img.filename).map((image, imgIndex) => (
                              <Col span={8} key={imgIndex}>
                                <ImagePreview
                                  image={image}
                                  systemInfoId={systemInfo?.id}
                                  style={{
                                    width: '100%',
                                    height: '80px',
                                    objectFit: 'cover',
                                    cursor: 'pointer',
                                    borderRadius: '4px'
                                  }}
                                  onClick={() => {
                                    openPreview(section.images.filter(img => img.filename), section.title, imgIndex);
                                  }}
                                />
                              </Col>
                            ))}
                          </Row>
                        </div>
                      )}

                      {/* Hi·ªÉn th·ªã t√†i li·ªáu c·ªßa quy tr√¨nh */}
                      {section.documents && section.documents.filter(doc => doc.filename).length > 0 && (
                        <div style={{ marginTop: '16px' }}>
                          <Text strong>T√†i li·ªáu:</Text>
                          <List
                            size="small"
                            dataSource={section.documents.filter(doc => doc.filename)}
                            renderItem={(doc) => (
                              <List.Item style={{ padding: '4px 0' }}>
                                <Space>
                                  <FileTextOutlined />
                                  <Text>{processFileName(doc)}</Text>
                                  <Button
                                    type="link"
                                    size="small"
                                    icon={<DownloadOutlined />}
                                    onClick={() => handleDownloadDocument(doc)}
                                  >
                                    T·∫£i
                                  </Button>
                                </Space>
                              </List.Item>
                            )}
                          />
                        </div>
                      )}
                    </Card>
                  </List.Item>
                )}
              />
            </Card>
          )}

          {/* Nguy√™n l√Ω ho·∫°t ƒë·ªông */}
          {contentObj.operation && (
            <Card title={`‚ö° ${contentObj.operation.title || 'Nguy√™n l√Ω ho·∫°t ƒë·ªông'}`} style={{ marginBottom: '24px' }}>
              <Paragraph style={{ fontSize: '16px', lineHeight: '1.6', marginBottom: '16px' }}>
                {contentObj.operation.description}
              </Paragraph>
              <Row gutter={[24, 16]}>
                {contentObj.operation.items && contentObj.operation.items.map((operation, index) => (
                  <Col xs={24} md={12} key={index}>
                    <Card size="small" title={operation.title} style={{ height: '100%' }}>
                      <Paragraph style={{ marginBottom: '16px' }}>
                        {operation.description}
                      </Paragraph>
                      <List
                        size="small"
                        dataSource={operation.steps}
                        renderItem={(item, stepIndex) => (
                          <List.Item style={{ border: 'none', padding: '4px 0' }}>
                            <Text>{stepIndex + 1}. {item}</Text>
                          </List.Item>
                        )}
                      />

                      {/* Hi·ªÉn th·ªã ·∫£nh c·ªßa operation */}
                      {operation.images && operation.images.filter(img => img.filename).length > 0 && (
                        <div style={{ marginTop: '16px' }}>
                          <Text strong>H√¨nh ·∫£nh:</Text>
                          <Row gutter={[8, 8]} style={{ marginTop: '8px' }}>
                            {operation.images.filter(img => img.filename).map((image, imgIndex) => (
                              <Col span={8} key={imgIndex}>
                                <ImagePreview
                                  image={image}
                                  systemInfoId={systemInfo?.id}
                                  style={{
                                    width: '100%',
                                    height: '80px',
                                    objectFit: 'cover',
                                    cursor: 'pointer',
                                    borderRadius: '4px'
                                  }}
                                  onClick={() => {
                                    openPreview(operation.images.filter(img => img.filename), operation.title, imgIndex);
                                  }}
                                />
                              </Col>
                            ))}
                          </Row>
                        </div>
                      )}

                      {/* Hi·ªÉn th·ªã t√†i li·ªáu c·ªßa operation */}
                      {operation.documents && operation.documents.filter(doc => doc.filename).length > 0 && (
                        <div style={{ marginTop: '16px' }}>
                          <Text strong>T√†i li·ªáu:</Text>
                          <List
                            size="small"
                            dataSource={operation.documents.filter(doc => doc.filename)}
                            renderItem={(doc) => (
                              <List.Item style={{ padding: '4px 0' }}>
                                <Space>
                                  <FileTextOutlined />
                                  <Text>{processFileName(doc)}</Text>
                                  <Button
                                    type="link"
                                    size="small"
                                    icon={<DownloadOutlined />}
                                    onClick={() => handleDownloadDocument(doc)}
                                  >
                                    T·∫£i
                                  </Button>
                                </Space>
                              </List.Item>
                            )}
                          />
                        </div>
                      )}
                    </Card>
                  </Col>
                ))}
              </Row>
            </Card>
          )}
        </>
      ) : (
        <Card title="üìÑ N·ªôi dung chi ti·∫øt" style={{ marginBottom: '24px' }}>
          {/* Test button ƒë·ªÉ ki·ªÉm tra Modal */}
          <Button
            type="primary"
            onClick={() => {
              console.log('üîç Test button clicked');
              openPreview([
                { filename: 'test.jpg', originalName: 'Test Image' }
              ], 'Test Image', 0);
            }}
            style={{ marginBottom: 16 }}
          >
            Test Modal Preview
          </Button>
        </Card>
      )}

      {/* S·ª± c·ªë th∆∞·ªùng g·∫∑p */}
      {contentObj && contentObj.troubleshooting && (
        <Card title={`‚ö†Ô∏è ${contentObj.troubleshooting.title || 'S·ª± c·ªë th∆∞·ªùng g·∫∑p'}`} style={{ marginBottom: '24px' }}>
          <Paragraph style={{ fontSize: '16px', lineHeight: '1.6', marginBottom: '16px' }}>
            {contentObj.troubleshooting.description}
          </Paragraph>
          <Alert
            message="L∆∞u √Ω: Lu√¥n tu√¢n th·ªß quy tr√¨nh an to√†n khi x·ª≠ l√Ω s·ª± c·ªë"
            type="warning"
            showIcon
            style={{ marginBottom: '16px' }}
          />
          <Row gutter={[16, 16]}>
            {contentObj.troubleshooting?.items?.map((issue, index) => (
              <Col xs={24} md={12} key={index}>
                <Card size="small" title={issue.problem} style={{ height: '100%' }}>
                  <Paragraph>
                    <Text strong>Nguy√™n nh√¢n:</Text> {issue.cause}
                  </Paragraph>
                  <Paragraph>
                    <Text strong>C√°ch x·ª≠ l√Ω:</Text> {issue.solution}
                  </Paragraph>

                  {/* Hi·ªÉn th·ªã ·∫£nh c·ªßa s·ª± c·ªë */}
                  {console.log('üîç Issue images:', issue.images)}
                  {issue.images && issue.images.filter(img => img.filename).length > 0 && (
                    <div style={{ marginTop: '16px' }}>
                      <Text strong>H√¨nh ·∫£nh li√™n quan:</Text>
                      <Row gutter={[8, 8]} style={{ marginTop: '8px' }}>
                        {issue.images.filter(img => img.filename).map((image, imgIndex) => (
                          <Col span={8} key={imgIndex}>
                            <ImagePreview
                              image={image}
                              systemInfoId={systemInfo?.id}
                              style={{
                                width: '100%',
                                height: '80px',
                                objectFit: 'cover',
                                cursor: 'pointer',
                                borderRadius: '4px'
                              }}
                              onClick={() => {
                                // M·ªü modal preview v·ªõi ·∫£nh c·ªßa s·ª± c·ªë n√†y
                                openPreview(issue.images.filter(img => img.filename), issue.problem, imgIndex);
                              }}
                            />
                          </Col>
                        ))}
                      </Row>
                    </div>
                  )}

                  {/* Hi·ªÉn th·ªã t√†i li·ªáu c·ªßa s·ª± c·ªë */}
                  {issue.documents && issue.documents.filter(doc => doc.filename).length > 0 && (
                    <div style={{ marginTop: '16px' }}>
                      <Text strong>T√†i li·ªáu li√™n quan:</Text>
                      <List
                        size="small"
                        dataSource={issue.documents.filter(doc => doc.filename)}
                        renderItem={(doc) => (
                          <List.Item style={{ padding: '4px 0' }}>
                            <Space>
                              <FileTextOutlined />
                              <Text>{processFileName(doc)}</Text>
                              <Button
                                type="link"
                                size="small"
                                icon={<DownloadOutlined />}
                                onClick={() => handleDownloadDocument(doc)}
                              >
                                T·∫£i
                              </Button>
                            </Space>
                          </List.Item>
                        )}
                      />
                    </div>
                  )}
                </Card>
              </Col>
            ))}
          </Row>
        </Card>
      )}

      {/* T√†i li·ªáu ƒë√≠nh k√®m t·ªïng h·ª£p */}
      {generalDocuments.length > 0 && (
        <Card title="üìÑ T√†i li·ªáu ƒë√≠nh k√®m" style={{ marginBottom: '24px' }}>
          <List
            dataSource={generalDocuments}
            renderItem={(doc) => (
              <List.Item
                style={{
                  padding: '4px',
                  border: '1px solid #f0f0f0',
                  borderRadius: '8px',
                  marginBottom: '8px',
                  backgroundColor: '#fafafa',
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center'
                }}
              >
                <Space>
                  <FileTextOutlined style={{ fontSize: '18px', color: '#1890ff' }} />
                  <Text strong style={{ fontSize: '14px' }}>
                    {processFileName(doc)}
                  </Text>
                </Space>
                <Button
                  type="primary"
                  icon={<DownloadOutlined />}
                  size="small"
                  onClick={() => handleDownloadDocument(doc)}
                  style={{
                    backgroundColor: '#52c41a',
                    borderColor: '#52c41a',
                    borderRadius: '6px'
                  }}
                >
                  T·∫£i xu·ªëng
                </Button>
              </List.Item>
            )}
          />
        </Card>
      )}

      {/* H√¨nh ·∫£nh */}
      {(generalImages.length > 0) && (
        <Card title="üñºÔ∏è H√¨nh ·∫£nh" style={{ marginBottom: '24px' }}>
          <Row gutter={[16, 16]}>
            {generalImages.map((image, index) => (
              <Col xs={24} md={8} key={`general-${index}`}>
                <Card size="small" hoverable>
                  <ImagePreview
                    image={image}
                    systemInfoId={systemInfo?.id}
                    style={{ width: '100%', height: '200px', objectFit: 'cover', cursor: 'pointer' }}
                    onClick={() => openPreview(generalImages, 'T√†i li·ªáu chung', index)}
                  />
                  <div style={{ marginTop: '8px', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                    <Text type="secondary">{processFileName(image)}</Text>
                    <Button
                      type="link"
                      icon={<DownloadOutlined />}
                      onClick={() => handleDownloadImage(image)}
                      style={{ marginLeft: 8 }}
                    >
                      Download
                    </Button>
                  </div>
                </Card>
              </Col>
            ))}
          </Row>
        </Card>
      )}

      {/* Modal preview ·∫£nh n√¢ng cao - lu√¥n render */}
      {console.log('üîç About to render Modal, previewVisible:', previewVisible)}
      {console.log('üîç currentPreviewImages:', currentPreviewImages)}
      {console.log('üîç currentPreviewTitle:', currentPreviewTitle)}
      {console.log('üîç Modal will be rendered:', previewVisible)}
      {console.log('üîç About to render ImagePreviewModal with props:', {
        visible: previewVisible,
        images: currentPreviewImages,
        title: currentPreviewTitle,
        index: previewIndex,
        systemInfoId: systemInfo?.id
      })}
      <ImagePreviewModal
        visible={previewVisible}
        images={currentPreviewImages}
        title={currentPreviewTitle}
        index={previewIndex}
        onClose={() => setPreviewVisible(false)}
        onPrev={prevImage}
        onNext={nextImage}
        onDownload={handleDownloadImage}
        onSetIndex={setPreviewIndex}
        systemInfoId={systemInfo?.id}
      />

      {/* Ghi ch√∫ cu·ªëi trang */}
      <Card style={{ background: '#fafafa' }}>
        <Space direction="vertical" size="small" style={{ width: '100%' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', flexWrap: 'wrap', gap: '16px' }}>
            <Space>
              <CalendarOutlined />
              <Text type="secondary">
                C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {displayData.updatedAt ? new Date(displayData.updatedAt).toLocaleDateString('vi-VN') : 'Ch∆∞a c·∫≠p nh·∫≠t'}
              </Text>
            </Space>
            <Space>
              <UserOutlined />
              <Text type="secondary">
                Ng∆∞·ªùi c·∫≠p nh·∫≠t: {displayData.updater?.fullname || 'Kh√¥ng x√°c ƒë·ªãnh'}
              </Text>
            </Space>
          </div>
        </Space>
      </Card>
    </div>
  );
};

export default SystemInfoPage;
